
UART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000027e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001a  00800060  0000027e  00000312  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000004c  0080007a  0080007a  0000032c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000032c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000035c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  00000398  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000596  00000000  00000000  00000408  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000002e7  00000000  00000000  0000099e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000325  00000000  00000000  00000c85  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000104  00000000  00000000  00000fac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000260  00000000  00000000  000010b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000324  00000000  00000000  00001310  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  00001634  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__vector_13>
  38:	0c 94 96 00 	jmp	0x12c	; 0x12c <__vector_14>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e7       	ldi	r30, 0x7E	; 126
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 37       	cpi	r26, 0x7A	; 122
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	aa e7       	ldi	r26, 0x7A	; 122
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 3c       	cpi	r26, 0xC6	; 198
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 3d 01 	jmp	0x27a	; 0x27a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:

char buff[7];

int main(void)
{
	uart_init(UART_BAUD_SELECT(4800, F_CPU));
  92:	8c e0       	ldi	r24, 0x0C	; 12
  94:	90 e0       	ldi	r25, 0x00	; 0
  96:	0e 94 bb 00 	call	0x176	; 0x176 <uart_init>
	sei();
  9a:	78 94       	sei
	DDRB = 0xFF;
  9c:	8f ef       	ldi	r24, 0xFF	; 255
  9e:	87 bb       	out	0x17, r24	; 23
    
	uart_putc('T');
  a0:	84 e5       	ldi	r24, 0x54	; 84
  a2:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <uart_putc>
	
	uart_puts("This is a test String...");
  a6:	80 e6       	ldi	r24, 0x60	; 96
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <uart_puts>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
  ae:	4a e0       	ldi	r20, 0x0A	; 10
  b0:	6f eb       	ldi	r22, 0xBF	; 191
  b2:	70 e0       	ldi	r23, 0x00	; 0
  b4:	89 e3       	ldi	r24, 0x39	; 57
  b6:	90 e3       	ldi	r25, 0x30	; 48
  b8:	0e 94 08 01 	call	0x210	; 0x210 <__itoa_ncheck>
	
	int value = 12345;
	itoa(value, buff, 10);
	uart_puts(buff);
  bc:	8f eb       	ldi	r24, 0xBF	; 191
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <uart_puts>
		char ch = uart_getc();
		
		if ( ch != UART_NO_DATA )
		{
			uart_putc(ch+1);
			PORTB = 1;
  c4:	c1 e0       	ldi	r28, 0x01	; 1
	itoa(value, buff, 10);
	uart_puts(buff);
	
    while(1)
    {
		char ch = uart_getc();
  c6:	0e 94 cf 00 	call	0x19e	; 0x19e <uart_getc>
		
		if ( ch != UART_NO_DATA )
		{
			uart_putc(ch+1);
  ca:	8f 5f       	subi	r24, 0xFF	; 255
  cc:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <uart_putc>
			PORTB = 1;
  d0:	c8 bb       	out	0x18, r28	; 24
  d2:	f9 cf       	rjmp	.-14     	; 0xc6 <main+0x34>

000000d4 <__vector_13>:
ISR (UART0_RECEIVE_INTERRUPT)	
/*************************************************************************
Function: UART Receive Complete interrupt
Purpose:  called when the UART has received a character
**************************************************************************/
{
  d4:	1f 92       	push	r1
  d6:	0f 92       	push	r0
  d8:	0f b6       	in	r0, 0x3f	; 63
  da:	0f 92       	push	r0
  dc:	11 24       	eor	r1, r1
  de:	2f 93       	push	r18
  e0:	8f 93       	push	r24
  e2:	9f 93       	push	r25
  e4:	ef 93       	push	r30
  e6:	ff 93       	push	r31
    unsigned char usr;
    unsigned char lastRxError;
 
 
    /* read UART status register and UART data register */ 
    usr  = UART0_STATUS;
  e8:	8b b1       	in	r24, 0x0b	; 11
    data = UART0_DATA;
  ea:	2c b1       	in	r18, 0x0c	; 12
    
    /* */
#if defined( AT90_UART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#elif defined( ATMEGA_USART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
  ec:	88 71       	andi	r24, 0x18	; 24
#elif defined( AT90USB_USART )
    lastRxError = (usr & (_BV(FE1)|_BV(DOR1)) );
#endif
        
    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
  ee:	e0 91 7c 00 	lds	r30, 0x007C	; 0x80007c <UART_RxHead>
  f2:	ef 5f       	subi	r30, 0xFF	; 255
  f4:	ef 71       	andi	r30, 0x1F	; 31
    
    if ( tmphead == UART_RxTail ) {
  f6:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <UART_RxTail>
  fa:	e9 17       	cp	r30, r25
  fc:	39 f0       	breq	.+14     	; 0x10c <__vector_13+0x38>
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    }else{
        /* store new index */
        UART_RxHead = tmphead;
  fe:	e0 93 7c 00 	sts	0x007C, r30	; 0x80007c <UART_RxHead>
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
 102:	f0 e0       	ldi	r31, 0x00	; 0
 104:	e1 58       	subi	r30, 0x81	; 129
 106:	ff 4f       	sbci	r31, 0xFF	; 255
 108:	20 83       	st	Z, r18
 10a:	01 c0       	rjmp	.+2      	; 0x10e <__vector_13+0x3a>
    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
    
    if ( tmphead == UART_RxTail ) {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
 10c:	82 e0       	ldi	r24, 0x02	; 2
        /* store new index */
        UART_RxHead = tmphead;
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
    }
    UART_LastRxError |= lastRxError;   
 10e:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <__data_end>
 112:	89 2b       	or	r24, r25
 114:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__data_end>
}
 118:	ff 91       	pop	r31
 11a:	ef 91       	pop	r30
 11c:	9f 91       	pop	r25
 11e:	8f 91       	pop	r24
 120:	2f 91       	pop	r18
 122:	0f 90       	pop	r0
 124:	0f be       	out	0x3f, r0	; 63
 126:	0f 90       	pop	r0
 128:	1f 90       	pop	r1
 12a:	18 95       	reti

0000012c <__vector_14>:
ISR (UART0_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART Data Register Empty interrupt
Purpose:  called when the UART is ready to transmit the next byte
**************************************************************************/
{
 12c:	1f 92       	push	r1
 12e:	0f 92       	push	r0
 130:	0f b6       	in	r0, 0x3f	; 63
 132:	0f 92       	push	r0
 134:	11 24       	eor	r1, r1
 136:	8f 93       	push	r24
 138:	9f 93       	push	r25
 13a:	ef 93       	push	r30
 13c:	ff 93       	push	r31
    unsigned char tmptail;

    
    if ( UART_TxHead != UART_TxTail) {
 13e:	90 91 7e 00 	lds	r25, 0x007E	; 0x80007e <UART_TxHead>
 142:	80 91 7d 00 	lds	r24, 0x007D	; 0x80007d <UART_TxTail>
 146:	98 17       	cp	r25, r24
 148:	61 f0       	breq	.+24     	; 0x162 <__vector_14+0x36>
        /* calculate and store new buffer index */
        tmptail = (UART_TxTail + 1) & UART_TX_BUFFER_MASK;
 14a:	e0 91 7d 00 	lds	r30, 0x007D	; 0x80007d <UART_TxTail>
 14e:	ef 5f       	subi	r30, 0xFF	; 255
 150:	ef 71       	andi	r30, 0x1F	; 31
        UART_TxTail = tmptail;
 152:	e0 93 7d 00 	sts	0x007D, r30	; 0x80007d <UART_TxTail>
        /* get one byte from buffer and write it to UART */
        UART0_DATA = UART_TxBuf[tmptail];  /* start transmission */
 156:	f0 e0       	ldi	r31, 0x00	; 0
 158:	e1 56       	subi	r30, 0x61	; 97
 15a:	ff 4f       	sbci	r31, 0xFF	; 255
 15c:	80 81       	ld	r24, Z
 15e:	8c b9       	out	0x0c, r24	; 12
 160:	01 c0       	rjmp	.+2      	; 0x164 <__vector_14+0x38>
    }else{
        /* tx buffer empty, disable UDRE interrupt */
        UART0_CONTROL &= ~_BV(UART0_UDRIE);
 162:	55 98       	cbi	0x0a, 5	; 10
    }
}
 164:	ff 91       	pop	r31
 166:	ef 91       	pop	r30
 168:	9f 91       	pop	r25
 16a:	8f 91       	pop	r24
 16c:	0f 90       	pop	r0
 16e:	0f be       	out	0x3f, r0	; 63
 170:	0f 90       	pop	r0
 172:	1f 90       	pop	r1
 174:	18 95       	reti

00000176 <uart_init>:
Input:    baudrate using macro UART_BAUD_SELECT()
Returns:  none
**************************************************************************/
void uart_init(unsigned int baudrate)
{
    UART_TxHead = 0;
 176:	10 92 7e 00 	sts	0x007E, r1	; 0x80007e <UART_TxHead>
    UART_TxTail = 0;
 17a:	10 92 7d 00 	sts	0x007D, r1	; 0x80007d <UART_TxTail>
    UART_RxHead = 0;
 17e:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <UART_RxHead>
    UART_RxTail = 0;
 182:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <UART_RxTail>
    /* enable UART receiver and transmmitter and receive complete interrupt */
    UART0_CONTROL = _BV(RXCIE)|_BV(RXEN)|_BV(TXEN);

#elif defined (ATMEGA_USART)
    /* Set baud rate */
    if ( baudrate & 0x8000 )
 186:	99 23       	and	r25, r25
 188:	1c f4       	brge	.+6      	; 0x190 <uart_init+0x1a>
    {
    	 UART0_STATUS = (1<<U2X);  //Enable 2x speed 
 18a:	22 e0       	ldi	r18, 0x02	; 2
 18c:	2b b9       	out	0x0b, r18	; 11
    	 baudrate &= ~0x8000;
 18e:	9f 77       	andi	r25, 0x7F	; 127
    }
    UBRRH = (unsigned char)(baudrate>>8);
 190:	90 bd       	out	0x20, r25	; 32
    UBRRL = (unsigned char) baudrate;
 192:	89 b9       	out	0x09, r24	; 9
   
    /* Enable USART receiver and transmitter and receive complete interrupt */
    UART0_CONTROL = _BV(RXCIE)|(1<<RXEN)|(1<<TXEN);
 194:	88 e9       	ldi	r24, 0x98	; 152
 196:	8a b9       	out	0x0a, r24	; 10
    
    /* Set frame format: asynchronous, 8data, no parity, 1stop bit */
    #ifdef URSEL
    UCSRC = (1<<URSEL)|(3<<UCSZ0);
 198:	86 e8       	ldi	r24, 0x86	; 134
 19a:	80 bd       	out	0x20, r24	; 32
 19c:	08 95       	ret

0000019e <uart_getc>:
{    
    unsigned char tmptail;
    unsigned char data;


    if ( UART_RxHead == UART_RxTail ) {
 19e:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <UART_RxHead>
 1a2:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <UART_RxTail>
 1a6:	98 17       	cp	r25, r24
 1a8:	81 f0       	breq	.+32     	; 0x1ca <uart_getc+0x2c>
        return UART_NO_DATA;   /* no data available */
    }
    
    /* calculate /store buffer index */
    tmptail = (UART_RxTail + 1) & UART_RX_BUFFER_MASK;
 1aa:	e0 91 7b 00 	lds	r30, 0x007B	; 0x80007b <UART_RxTail>
 1ae:	ef 5f       	subi	r30, 0xFF	; 255
 1b0:	ef 71       	andi	r30, 0x1F	; 31
    UART_RxTail = tmptail; 
 1b2:	e0 93 7b 00 	sts	0x007B, r30	; 0x80007b <UART_RxTail>
    
    /* get data from receive buffer */
    data = UART_RxBuf[tmptail];
 1b6:	f0 e0       	ldi	r31, 0x00	; 0
 1b8:	e1 58       	subi	r30, 0x81	; 129
 1ba:	ff 4f       	sbci	r31, 0xFF	; 255
 1bc:	80 81       	ld	r24, Z
    
    data = (UART_LastRxError << 8) + data;
 1be:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <__data_end>
    UART_LastRxError = 0;
 1c2:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <__data_end>
    return data;
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	08 95       	ret
    unsigned char tmptail;
    unsigned char data;


    if ( UART_RxHead == UART_RxTail ) {
        return UART_NO_DATA;   /* no data available */
 1ca:	80 e0       	ldi	r24, 0x00	; 0
 1cc:	91 e0       	ldi	r25, 0x01	; 1
    
    data = (UART_LastRxError << 8) + data;
    UART_LastRxError = 0;
    return data;

}/* uart_getc */
 1ce:	08 95       	ret

000001d0 <uart_putc>:
void uart_putc(unsigned char data)
{
    unsigned char tmphead;

    
    tmphead  = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
 1d0:	20 91 7e 00 	lds	r18, 0x007E	; 0x80007e <UART_TxHead>
 1d4:	2f 5f       	subi	r18, 0xFF	; 255
 1d6:	2f 71       	andi	r18, 0x1F	; 31
    
    while ( tmphead == UART_TxTail ){
 1d8:	90 91 7d 00 	lds	r25, 0x007D	; 0x80007d <UART_TxTail>
 1dc:	29 17       	cp	r18, r25
 1de:	e1 f3       	breq	.-8      	; 0x1d8 <uart_putc+0x8>
        ;/* wait for free space in buffer */
    }
    
    UART_TxBuf[tmphead] = data;
 1e0:	e2 2f       	mov	r30, r18
 1e2:	f0 e0       	ldi	r31, 0x00	; 0
 1e4:	e1 56       	subi	r30, 0x61	; 97
 1e6:	ff 4f       	sbci	r31, 0xFF	; 255
 1e8:	80 83       	st	Z, r24
    UART_TxHead = tmphead;
 1ea:	20 93 7e 00 	sts	0x007E, r18	; 0x80007e <UART_TxHead>

    /* enable UDRE interrupt */
    UART0_CONTROL    |= _BV(UART0_UDRIE);
 1ee:	55 9a       	sbi	0x0a, 5	; 10
 1f0:	08 95       	ret

000001f2 <uart_puts>:
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
 1f2:	cf 93       	push	r28
 1f4:	df 93       	push	r29
 1f6:	ec 01       	movw	r28, r24
    while (*s) 
 1f8:	88 81       	ld	r24, Y
 1fa:	88 23       	and	r24, r24
 1fc:	31 f0       	breq	.+12     	; 0x20a <uart_puts+0x18>
 1fe:	21 96       	adiw	r28, 0x01	; 1
      uart_putc(*s++);
 200:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <uart_putc>
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
    while (*s) 
 204:	89 91       	ld	r24, Y+
 206:	81 11       	cpse	r24, r1
 208:	fb cf       	rjmp	.-10     	; 0x200 <uart_puts+0xe>
      uart_putc(*s++);

}/* uart_puts */
 20a:	df 91       	pop	r29
 20c:	cf 91       	pop	r28
 20e:	08 95       	ret

00000210 <__itoa_ncheck>:
 210:	bb 27       	eor	r27, r27
 212:	4a 30       	cpi	r20, 0x0A	; 10
 214:	31 f4       	brne	.+12     	; 0x222 <__itoa_ncheck+0x12>
 216:	99 23       	and	r25, r25
 218:	22 f4       	brpl	.+8      	; 0x222 <__itoa_ncheck+0x12>
 21a:	bd e2       	ldi	r27, 0x2D	; 45
 21c:	90 95       	com	r25
 21e:	81 95       	neg	r24
 220:	9f 4f       	sbci	r25, 0xFF	; 255
 222:	0c 94 14 01 	jmp	0x228	; 0x228 <__utoa_common>

00000226 <__utoa_ncheck>:
 226:	bb 27       	eor	r27, r27

00000228 <__utoa_common>:
 228:	fb 01       	movw	r30, r22
 22a:	55 27       	eor	r21, r21
 22c:	aa 27       	eor	r26, r26
 22e:	88 0f       	add	r24, r24
 230:	99 1f       	adc	r25, r25
 232:	aa 1f       	adc	r26, r26
 234:	a4 17       	cp	r26, r20
 236:	10 f0       	brcs	.+4      	; 0x23c <__utoa_common+0x14>
 238:	a4 1b       	sub	r26, r20
 23a:	83 95       	inc	r24
 23c:	50 51       	subi	r21, 0x10	; 16
 23e:	b9 f7       	brne	.-18     	; 0x22e <__utoa_common+0x6>
 240:	a0 5d       	subi	r26, 0xD0	; 208
 242:	aa 33       	cpi	r26, 0x3A	; 58
 244:	08 f0       	brcs	.+2      	; 0x248 <__utoa_common+0x20>
 246:	a9 5d       	subi	r26, 0xD9	; 217
 248:	a1 93       	st	Z+, r26
 24a:	00 97       	sbiw	r24, 0x00	; 0
 24c:	79 f7       	brne	.-34     	; 0x22c <__utoa_common+0x4>
 24e:	b1 11       	cpse	r27, r1
 250:	b1 93       	st	Z+, r27
 252:	11 92       	st	Z+, r1
 254:	cb 01       	movw	r24, r22
 256:	0c 94 2d 01 	jmp	0x25a	; 0x25a <strrev>

0000025a <strrev>:
 25a:	dc 01       	movw	r26, r24
 25c:	fc 01       	movw	r30, r24
 25e:	67 2f       	mov	r22, r23
 260:	71 91       	ld	r23, Z+
 262:	77 23       	and	r23, r23
 264:	e1 f7       	brne	.-8      	; 0x25e <strrev+0x4>
 266:	32 97       	sbiw	r30, 0x02	; 2
 268:	04 c0       	rjmp	.+8      	; 0x272 <strrev+0x18>
 26a:	7c 91       	ld	r23, X
 26c:	6d 93       	st	X+, r22
 26e:	70 83       	st	Z, r23
 270:	62 91       	ld	r22, -Z
 272:	ae 17       	cp	r26, r30
 274:	bf 07       	cpc	r27, r31
 276:	c8 f3       	brcs	.-14     	; 0x26a <strrev+0x10>
 278:	08 95       	ret

0000027a <_exit>:
 27a:	f8 94       	cli

0000027c <__stop_program>:
 27c:	ff cf       	rjmp	.-2      	; 0x27c <__stop_program>
