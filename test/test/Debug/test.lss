
test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000032a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  0000037e  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 000000b0  00000000  00000000  000003ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000919  00000000  00000000  0000045e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000457  00000000  00000000  00000d77  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000417  00000000  00000000  000011ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000178  00000000  00000000  000015e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000002bc  00000000  00000000  00001760  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000785  00000000  00000000  00001a1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 000000a8  00000000  00000000  000021a1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 2b 01 	call	0x256	; 0x256 <main>
  64:	0c 94 93 01 	jmp	0x326	; 0x326 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <toggle_e>:

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
  6c:	96 9a       	sbi	0x12, 6	; 18
    lcd_e_delay();
  6e:	00 c0       	rjmp	.+0      	; 0x70 <toggle_e+0x4>
    lcd_e_low();
  70:	96 98       	cbi	0x12, 6	; 18
  72:	08 95       	ret

00000074 <lcd_write>:
                 0: write instruction
Returns:  none
*************************************************************************/
#if LCD_IO_MODE
static void lcd_write(uint8_t data,uint8_t rs) 
{
  74:	cf 93       	push	r28
  76:	c8 2f       	mov	r28, r24
    unsigned char dataBits ;


    if (rs) {   /* write data        (RS=1, RW=0) */
  78:	66 23       	and	r22, r22
  7a:	11 f0       	breq	.+4      	; 0x80 <lcd_write+0xc>
       lcd_rs_high();
  7c:	94 9a       	sbi	0x12, 4	; 18
  7e:	01 c0       	rjmp	.+2      	; 0x82 <lcd_write+0xe>
    } else {    /* write instruction (RS=0, RW=0) */
       lcd_rs_low();
  80:	94 98       	cbi	0x12, 4	; 18
    }
    lcd_rw_low();
  82:	95 98       	cbi	0x12, 5	; 18
        LCD_DATA0_PORT = dataBits | 0x0F;
    }
    else
    {
        /* configure data pins as output */
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
  84:	a4 9a       	sbi	0x14, 4	; 20
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
  86:	a5 9a       	sbi	0x14, 5	; 20
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
  88:	a6 9a       	sbi	0x14, 6	; 20
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
  8a:	a7 9a       	sbi	0x14, 7	; 20
        
        /* output high nibble first */
        LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
  8c:	af 98       	cbi	0x15, 7	; 21
        LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
  8e:	ae 98       	cbi	0x15, 6	; 21
        LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
  90:	ad 98       	cbi	0x15, 5	; 21
        LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
  92:	ac 98       	cbi	0x15, 4	; 21
    	if(data & 0x80) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
  94:	cc 23       	and	r28, r28
  96:	0c f4       	brge	.+2      	; 0x9a <lcd_write+0x26>
  98:	af 9a       	sbi	0x15, 7	; 21
    	if(data & 0x40) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
  9a:	c6 fd       	sbrc	r28, 6
  9c:	ae 9a       	sbi	0x15, 6	; 21
    	if(data & 0x20) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
  9e:	c5 fd       	sbrc	r28, 5
  a0:	ad 9a       	sbi	0x15, 5	; 21
    	if(data & 0x10) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);   
  a2:	c4 fd       	sbrc	r28, 4
  a4:	ac 9a       	sbi	0x15, 4	; 21
        lcd_e_toggle();
  a6:	0e 94 36 00 	call	0x6c	; 0x6c <toggle_e>
        
        /* output low nibble */
        LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
  aa:	af 98       	cbi	0x15, 7	; 21
        LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
  ac:	ae 98       	cbi	0x15, 6	; 21
        LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
  ae:	ad 98       	cbi	0x15, 5	; 21
        LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
  b0:	ac 98       	cbi	0x15, 4	; 21
    	if(data & 0x08) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
  b2:	c3 fd       	sbrc	r28, 3
  b4:	af 9a       	sbi	0x15, 7	; 21
    	if(data & 0x04) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
  b6:	c2 fd       	sbrc	r28, 2
  b8:	ae 9a       	sbi	0x15, 6	; 21
    	if(data & 0x02) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
  ba:	c1 fd       	sbrc	r28, 1
  bc:	ad 9a       	sbi	0x15, 5	; 21
    	if(data & 0x01) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
  be:	c0 fd       	sbrc	r28, 0
  c0:	ac 9a       	sbi	0x15, 4	; 21
        lcd_e_toggle();        
  c2:	0e 94 36 00 	call	0x6c	; 0x6c <toggle_e>
        
        /* all data pins high (inactive) */
        LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
  c6:	ac 9a       	sbi	0x15, 4	; 21
        LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
  c8:	ad 9a       	sbi	0x15, 5	; 21
        LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
  ca:	ae 9a       	sbi	0x15, 6	; 21
        LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
  cc:	af 9a       	sbi	0x15, 7	; 21
    }
}
  ce:	cf 91       	pop	r28
  d0:	08 95       	ret

000000d2 <lcd_read>:
static uint8_t lcd_read(uint8_t rs) 
{
    uint8_t data;
    
    
    if (rs)
  d2:	88 23       	and	r24, r24
  d4:	11 f0       	breq	.+4      	; 0xda <lcd_read+0x8>
        lcd_rs_high();                       /* RS=1: read data      */
  d6:	94 9a       	sbi	0x12, 4	; 18
  d8:	01 c0       	rjmp	.+2      	; 0xdc <lcd_read+0xa>
    else
        lcd_rs_low();                        /* RS=0: read busy flag */
  da:	94 98       	cbi	0x12, 4	; 18
    lcd_rw_high();                           /* RW=1  read mode      */
  dc:	95 9a       	sbi	0x12, 5	; 18
        lcd_e_low();
    }
    else
    {
        /* configure data pins as input */
        DDR(LCD_DATA0_PORT) &= ~_BV(LCD_DATA0_PIN);
  de:	a4 98       	cbi	0x14, 4	; 20
        DDR(LCD_DATA1_PORT) &= ~_BV(LCD_DATA1_PIN);
  e0:	a5 98       	cbi	0x14, 5	; 20
        DDR(LCD_DATA2_PORT) &= ~_BV(LCD_DATA2_PIN);
  e2:	a6 98       	cbi	0x14, 6	; 20
        DDR(LCD_DATA3_PORT) &= ~_BV(LCD_DATA3_PIN);
  e4:	a7 98       	cbi	0x14, 7	; 20
                
        /* read high nibble first */
        lcd_e_high();
  e6:	96 9a       	sbi	0x12, 6	; 18
        lcd_e_delay();        
  e8:	00 c0       	rjmp	.+0      	; 0xea <lcd_read+0x18>
        data = 0;
        if ( PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x10;
  ea:	9c 99       	sbic	0x13, 4	; 19
  ec:	02 c0       	rjmp	.+4      	; 0xf2 <lcd_read+0x20>
        DDR(LCD_DATA3_PORT) &= ~_BV(LCD_DATA3_PIN);
                
        /* read high nibble first */
        lcd_e_high();
        lcd_e_delay();        
        data = 0;
  ee:	80 e0       	ldi	r24, 0x00	; 0
  f0:	01 c0       	rjmp	.+2      	; 0xf4 <lcd_read+0x22>
        if ( PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x10;
  f2:	80 e1       	ldi	r24, 0x10	; 16
        if ( PIN(LCD_DATA1_PORT) & _BV(LCD_DATA1_PIN) ) data |= 0x20;
  f4:	9d 99       	sbic	0x13, 5	; 19
  f6:	80 62       	ori	r24, 0x20	; 32
        if ( PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x40;
  f8:	9e 99       	sbic	0x13, 6	; 19
  fa:	80 64       	ori	r24, 0x40	; 64
        if ( PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x80;
  fc:	9f 99       	sbic	0x13, 7	; 19
  fe:	80 68       	ori	r24, 0x80	; 128
        lcd_e_low();
 100:	96 98       	cbi	0x12, 6	; 18

        lcd_e_delay();                       /* Enable 500ns low       */
 102:	00 c0       	rjmp	.+0      	; 0x104 <lcd_read+0x32>
    
        /* read low nibble */    
        lcd_e_high();
 104:	96 9a       	sbi	0x12, 6	; 18
        lcd_e_delay();
 106:	00 c0       	rjmp	.+0      	; 0x108 <lcd_read+0x36>
        if ( PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x01;
 108:	9c 99       	sbic	0x13, 4	; 19
 10a:	81 60       	ori	r24, 0x01	; 1
        if ( PIN(LCD_DATA1_PORT) & _BV(LCD_DATA1_PIN) ) data |= 0x02;
 10c:	9d 99       	sbic	0x13, 5	; 19
 10e:	82 60       	ori	r24, 0x02	; 2
        if ( PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x04;
 110:	9e 99       	sbic	0x13, 6	; 19
 112:	84 60       	ori	r24, 0x04	; 4
        if ( PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x08;        
 114:	9f 99       	sbic	0x13, 7	; 19
 116:	88 60       	ori	r24, 0x08	; 8
        lcd_e_low();
 118:	96 98       	cbi	0x12, 6	; 18
    }
    return data;
}
 11a:	08 95       	ret

0000011c <lcd_waitbusy>:

{
    register uint8_t c;
    
    /* wait until busy flag is cleared */
    while ( (c=lcd_read(0)) & (1<<LCD_BUSY)) {}
 11c:	80 e0       	ldi	r24, 0x00	; 0
 11e:	0e 94 69 00 	call	0xd2	; 0xd2 <lcd_read>
 122:	88 23       	and	r24, r24
 124:	dc f3       	brlt	.-10     	; 0x11c <lcd_waitbusy>
 delay loop for small accurate delays: 16-bit counter, 4 cycles/loop
*************************************************************************/
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
 126:	00 c0       	rjmp	.+0      	; 0x128 <lcd_waitbusy+0xc>
    
    /* the address counter is updated 4us after the busy flag is cleared */
    delay(2);

    /* now read the address counter */
    return (lcd_read(0));  // return address counter
 128:	80 e0       	ldi	r24, 0x00	; 0
 12a:	0e 94 69 00 	call	0xd2	; 0xd2 <lcd_read>
    
}/* lcd_waitbusy */
 12e:	08 95       	ret

00000130 <lcd_command>:
Send LCD controller instruction command
Input:   instruction to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_command(uint8_t cmd)
{
 130:	cf 93       	push	r28
 132:	c8 2f       	mov	r28, r24
    lcd_waitbusy();
 134:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_waitbusy>
    lcd_write(cmd,0);
 138:	60 e0       	ldi	r22, 0x00	; 0
 13a:	8c 2f       	mov	r24, r28
 13c:	0e 94 3a 00 	call	0x74	; 0x74 <lcd_write>
}
 140:	cf 91       	pop	r28
 142:	08 95       	ret

00000144 <lcd_gotoxy>:
{
#if LCD_LINES==1
    lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
#endif
#if LCD_LINES==2
    if ( y==0 ) 
 144:	61 11       	cpse	r22, r1
 146:	04 c0       	rjmp	.+8      	; 0x150 <lcd_gotoxy+0xc>
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
 148:	80 58       	subi	r24, 0x80	; 128
 14a:	0e 94 98 00 	call	0x130	; 0x130 <lcd_command>
 14e:	08 95       	ret
    else
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE2+x);
 150:	80 54       	subi	r24, 0x40	; 64
 152:	0e 94 98 00 	call	0x130	; 0x130 <lcd_command>
 156:	08 95       	ret

00000158 <lcd_clrscr>:
/*************************************************************************
Clear display and set cursor to home position
*************************************************************************/
void lcd_clrscr(void)
{
    lcd_command(1<<LCD_CLR);
 158:	81 e0       	ldi	r24, 0x01	; 1
 15a:	0e 94 98 00 	call	0x130	; 0x130 <lcd_command>
 15e:	08 95       	ret

00000160 <lcd_putc>:
Display character at current cursor position 
Input:    character to be displayed                                       
Returns:  none
*************************************************************************/
void lcd_putc(char c)
{
 160:	cf 93       	push	r28
 162:	c8 2f       	mov	r28, r24
    uint8_t pos;


    pos = lcd_waitbusy();   // read busy-flag and address counter
 164:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_waitbusy>
    if (c=='\n')
 168:	ca 30       	cpi	r28, 0x0A	; 10
 16a:	49 f4       	brne	.+18     	; 0x17e <lcd_putc+0x1e>

#if LCD_LINES==1
    addressCounter = 0;
#endif
#if LCD_LINES==2
    if ( pos < (LCD_START_LINE2) )
 16c:	80 34       	cpi	r24, 0x40	; 64
 16e:	10 f4       	brcc	.+4      	; 0x174 <lcd_putc+0x14>
        addressCounter = LCD_START_LINE2;
 170:	80 e4       	ldi	r24, 0x40	; 64
 172:	01 c0       	rjmp	.+2      	; 0x176 <lcd_putc+0x16>
    else
        addressCounter = LCD_START_LINE1;
 174:	80 e0       	ldi	r24, 0x00	; 0
        addressCounter = LCD_START_LINE4;
    else 
        addressCounter = LCD_START_LINE1;
#endif
#endif
    lcd_command((1<<LCD_DDRAM)+addressCounter);
 176:	80 58       	subi	r24, 0x80	; 128
 178:	0e 94 98 00 	call	0x130	; 0x130 <lcd_command>
 17c:	04 c0       	rjmp	.+8      	; 0x186 <lcd_putc+0x26>
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1,0);
        }
#endif
        lcd_waitbusy();
#endif
        lcd_write(c, 1);
 17e:	61 e0       	ldi	r22, 0x01	; 1
 180:	8c 2f       	mov	r24, r28
 182:	0e 94 3a 00 	call	0x74	; 0x74 <lcd_write>
    }

}/* lcd_putc */
 186:	cf 91       	pop	r28
 188:	08 95       	ret

0000018a <lcd_puts>:
Input:    string to be displayed
Returns:  none
*************************************************************************/
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
 18a:	cf 93       	push	r28
 18c:	df 93       	push	r29
    register char c;

    while ( (c = *s++) ) {
 18e:	ec 01       	movw	r28, r24
 190:	21 96       	adiw	r28, 0x01	; 1
 192:	fc 01       	movw	r30, r24
 194:	80 81       	ld	r24, Z
 196:	88 23       	and	r24, r24
 198:	29 f0       	breq	.+10     	; 0x1a4 <lcd_puts+0x1a>
        lcd_putc(c);
 19a:	0e 94 b0 00 	call	0x160	; 0x160 <lcd_putc>
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = *s++) ) {
 19e:	89 91       	ld	r24, Y+
 1a0:	81 11       	cpse	r24, r1
 1a2:	fb cf       	rjmp	.-10     	; 0x19a <lcd_puts+0x10>
        lcd_putc(c);
    }

}/* lcd_puts */
 1a4:	df 91       	pop	r29
 1a6:	cf 91       	pop	r28
 1a8:	08 95       	ret

000001aa <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 1aa:	cf 93       	push	r28
 1ac:	c8 2f       	mov	r28, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 1ae:	8c 9a       	sbi	0x11, 4	; 17
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 1b0:	8d 9a       	sbi	0x11, 5	; 17
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 1b2:	8e 9a       	sbi	0x11, 6	; 17
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 1b4:	a4 9a       	sbi	0x14, 4	; 20
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 1b6:	a5 9a       	sbi	0x14, 5	; 20
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 1b8:	a6 9a       	sbi	0x14, 6	; 20
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 1ba:	a7 9a       	sbi	0x14, 7	; 20
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 1bc:	e0 ea       	ldi	r30, 0xA0	; 160
 1be:	ff e0       	ldi	r31, 0x0F	; 15
 1c0:	31 97       	sbiw	r30, 0x01	; 1
 1c2:	f1 f7       	brne	.-4      	; 0x1c0 <lcd_init+0x16>
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
    }
    delay(16000);        /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);  // _BV(LCD_FUNCTION)>>4;
 1c4:	ad 9a       	sbi	0x15, 5	; 21
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
 1c6:	ac 9a       	sbi	0x15, 4	; 21
    lcd_e_toggle();
 1c8:	0e 94 36 00 	call	0x6c	; 0x6c <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 1cc:	e0 ee       	ldi	r30, 0xE0	; 224
 1ce:	f4 e0       	ldi	r31, 0x04	; 4
 1d0:	31 97       	sbiw	r30, 0x01	; 1
 1d2:	f1 f7       	brne	.-4      	; 0x1d0 <lcd_init+0x26>
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
    lcd_e_toggle();
    delay(4992);         /* delay, busy flag can't be checked here */
   
    /* repeat last command */ 
    lcd_e_toggle();      
 1d4:	0e 94 36 00 	call	0x6c	; 0x6c <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 1d8:	e0 e1       	ldi	r30, 0x10	; 16
 1da:	f0 e0       	ldi	r31, 0x00	; 0
 1dc:	31 97       	sbiw	r30, 0x01	; 1
 1de:	f1 f7       	brne	.-4      	; 0x1dc <lcd_init+0x32>
    /* repeat last command */ 
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */
    
    /* repeat last command a third time */
    lcd_e_toggle();      
 1e0:	0e 94 36 00 	call	0x6c	; 0x6c <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 1e4:	e0 e1       	ldi	r30, 0x10	; 16
 1e6:	f0 e0       	ldi	r31, 0x00	; 0
 1e8:	31 97       	sbiw	r30, 0x01	; 1
 1ea:	f1 f7       	brne	.-4      	; 0x1e8 <lcd_init+0x3e>
    /* repeat last command a third time */
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
 1ec:	ac 98       	cbi	0x15, 4	; 21
    lcd_e_toggle();
 1ee:	0e 94 36 00 	call	0x6c	; 0x6c <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 1f2:	e0 e1       	ldi	r30, 0x10	; 16
 1f4:	f0 e0       	ldi	r31, 0x00	; 0
 1f6:	31 97       	sbiw	r30, 0x01	; 1
 1f8:	f1 f7       	brne	.-4      	; 0x1f6 <lcd_init+0x4c>
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
 1fa:	88 e2       	ldi	r24, 0x28	; 40
 1fc:	0e 94 98 00 	call	0x130	; 0x130 <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
 200:	88 e0       	ldi	r24, 0x08	; 8
 202:	0e 94 98 00 	call	0x130	; 0x130 <lcd_command>
    lcd_clrscr();                           /* display clear                */ 
 206:	0e 94 ac 00 	call	0x158	; 0x158 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
 20a:	86 e0       	ldi	r24, 0x06	; 6
 20c:	0e 94 98 00 	call	0x130	; 0x130 <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
 210:	8c 2f       	mov	r24, r28
 212:	0e 94 98 00 	call	0x130	; 0x130 <lcd_command>

}/* lcd_init */
 216:	cf 91       	pop	r28
 218:	08 95       	ret

0000021a <ERROR>:
int ERROR()
{
	uint8_t i,sens,sens_r,sens_l;
	uint8_t err_r=0;
	uint8_t err_l=0;
	sens=PINA;
 21a:	99 b3       	in	r25, 0x19	; 25
	for (i=5;i<9;i++)
	{
		err_r++;
		sens_r=sens&(0b11111111>>i);
 21c:	89 2f       	mov	r24, r25
 21e:	87 70       	andi	r24, 0x07	; 7
		if(sens_r==0) break;
 220:	59 f0       	breq	.+22     	; 0x238 <ERROR+0x1e>
	uint8_t err_l=0;
	sens=PINA;
	for (i=5;i<9;i++)
	{
		err_r++;
		sens_r=sens&(0b11111111>>i);
 222:	89 2f       	mov	r24, r25
 224:	83 70       	andi	r24, 0x03	; 3
		if(sens_r==0) break;
 226:	21 f0       	breq	.+8      	; 0x230 <ERROR+0x16>
 228:	90 ff       	sbrs	r25, 0
 22a:	04 c0       	rjmp	.+8      	; 0x234 <ERROR+0x1a>
	uint8_t err_r=0;
	uint8_t err_l=0;
	sens=PINA;
	for (i=5;i<9;i++)
	{
		err_r++;
 22c:	84 e0       	ldi	r24, 0x04	; 4
 22e:	05 c0       	rjmp	.+10     	; 0x23a <ERROR+0x20>
 230:	82 e0       	ldi	r24, 0x02	; 2
 232:	03 c0       	rjmp	.+6      	; 0x23a <ERROR+0x20>
 234:	83 e0       	ldi	r24, 0x03	; 3
 236:	01 c0       	rjmp	.+2      	; 0x23a <ERROR+0x20>
 238:	81 e0       	ldi	r24, 0x01	; 1
		if(sens_r==0) break;
	}
	for (i=5;i<8;i++)
	{
		err_l++;
		sens_l=sens&(0b11111111<<i);
 23a:	29 2f       	mov	r18, r25
 23c:	20 7e       	andi	r18, 0xE0	; 224
		if(sens_l==0)break;
 23e:	31 f0       	breq	.+12     	; 0x24c <ERROR+0x32>
		if(sens_r==0) break;
	}
	for (i=5;i<8;i++)
	{
		err_l++;
		sens_l=sens&(0b11111111<<i);
 240:	90 7c       	andi	r25, 0xC0	; 192
		if(sens_l==0)break;
 242:	11 f0       	breq	.+4      	; 0x248 <ERROR+0x2e>
		sens_r=sens&(0b11111111>>i);
		if(sens_r==0) break;
	}
	for (i=5;i<8;i++)
	{
		err_l++;
 244:	23 e0       	ldi	r18, 0x03	; 3
 246:	03 c0       	rjmp	.+6      	; 0x24e <ERROR+0x34>
 248:	22 e0       	ldi	r18, 0x02	; 2
 24a:	01 c0       	rjmp	.+2      	; 0x24e <ERROR+0x34>
 24c:	21 e0       	ldi	r18, 0x01	; 1
		sens_l=sens&(0b11111111<<i);
		if(sens_l==0)break;
	}
	return (err_r-err_l);
 24e:	90 e0       	ldi	r25, 0x00	; 0
}
 250:	82 1b       	sub	r24, r18
 252:	91 09       	sbc	r25, r1
 254:	08 95       	ret

00000256 <main>:

int main(void)
{
 256:	cf 93       	push	r28
 258:	df 93       	push	r29
 25a:	cd b7       	in	r28, 0x3d	; 61
 25c:	de b7       	in	r29, 0x3e	; 62
 25e:	28 97       	sbiw	r28, 0x08	; 8
 260:	0f b6       	in	r0, 0x3f	; 63
 262:	f8 94       	cli
 264:	de bf       	out	0x3e, r29	; 62
 266:	0f be       	out	0x3f, r0	; 63
 268:	cd bf       	out	0x3d, r28	; 61
	DDRB=0xFF;
 26a:	8f ef       	ldi	r24, 0xFF	; 255
 26c:	87 bb       	out	0x17, r24	; 23
	PORTB|=(1<<PB0);
 26e:	c0 9a       	sbi	0x18, 0	; 24
	int error;
	char buffer[8];
	MCUCSR|=(1<<JTD);
 270:	94 b7       	in	r25, 0x34	; 52
 272:	90 68       	ori	r25, 0x80	; 128
 274:	94 bf       	out	0x34, r25	; 52
	MCUCSR|=(1<<JTD);
 276:	94 b7       	in	r25, 0x34	; 52
 278:	90 68       	ori	r25, 0x80	; 128
 27a:	94 bf       	out	0x34, r25	; 52
	DDRC = 0xFF;
 27c:	84 bb       	out	0x14, r24	; 20
	DDRA = 0x00;
 27e:	1a ba       	out	0x1a, r1	; 26
	lcd_init(LCD_DISP_ON);
 280:	8c e0       	ldi	r24, 0x0C	; 12
 282:	0e 94 d5 00 	call	0x1aa	; 0x1aa <lcd_init>
	lcd_clrscr();
 286:	0e 94 ac 00 	call	0x158	; 0x158 <lcd_clrscr>
	while(1)
	{
		error=ERROR();
 28a:	0e 94 0d 01 	call	0x21a	; 0x21a <ERROR>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 28e:	4a e0       	ldi	r20, 0x0A	; 10
 290:	be 01       	movw	r22, r28
 292:	6f 5f       	subi	r22, 0xFF	; 255
 294:	7f 4f       	sbci	r23, 0xFF	; 255
 296:	0e 94 5e 01 	call	0x2bc	; 0x2bc <__itoa_ncheck>
		itoa(error,buffer,10);
		lcd_gotoxy(7,0);
 29a:	60 e0       	ldi	r22, 0x00	; 0
 29c:	87 e0       	ldi	r24, 0x07	; 7
 29e:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_gotoxy>
		lcd_puts(buffer);
 2a2:	ce 01       	movw	r24, r28
 2a4:	01 96       	adiw	r24, 0x01	; 1
 2a6:	0e 94 c5 00 	call	0x18a	; 0x18a <lcd_puts>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2aa:	89 e6       	ldi	r24, 0x69	; 105
 2ac:	98 e1       	ldi	r25, 0x18	; 24
 2ae:	01 97       	sbiw	r24, 0x01	; 1
 2b0:	f1 f7       	brne	.-4      	; 0x2ae <main+0x58>
 2b2:	00 c0       	rjmp	.+0      	; 0x2b4 <main+0x5e>
 2b4:	00 00       	nop
		
		_delay_ms(25);
		
		lcd_clrscr();
 2b6:	0e 94 ac 00 	call	0x158	; 0x158 <lcd_clrscr>
 2ba:	e7 cf       	rjmp	.-50     	; 0x28a <main+0x34>

000002bc <__itoa_ncheck>:
 2bc:	bb 27       	eor	r27, r27
 2be:	4a 30       	cpi	r20, 0x0A	; 10
 2c0:	31 f4       	brne	.+12     	; 0x2ce <__itoa_ncheck+0x12>
 2c2:	99 23       	and	r25, r25
 2c4:	22 f4       	brpl	.+8      	; 0x2ce <__itoa_ncheck+0x12>
 2c6:	bd e2       	ldi	r27, 0x2D	; 45
 2c8:	90 95       	com	r25
 2ca:	81 95       	neg	r24
 2cc:	9f 4f       	sbci	r25, 0xFF	; 255
 2ce:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__utoa_common>

000002d2 <__utoa_ncheck>:
 2d2:	bb 27       	eor	r27, r27

000002d4 <__utoa_common>:
 2d4:	fb 01       	movw	r30, r22
 2d6:	55 27       	eor	r21, r21
 2d8:	aa 27       	eor	r26, r26
 2da:	88 0f       	add	r24, r24
 2dc:	99 1f       	adc	r25, r25
 2de:	aa 1f       	adc	r26, r26
 2e0:	a4 17       	cp	r26, r20
 2e2:	10 f0       	brcs	.+4      	; 0x2e8 <__utoa_common+0x14>
 2e4:	a4 1b       	sub	r26, r20
 2e6:	83 95       	inc	r24
 2e8:	50 51       	subi	r21, 0x10	; 16
 2ea:	b9 f7       	brne	.-18     	; 0x2da <__utoa_common+0x6>
 2ec:	a0 5d       	subi	r26, 0xD0	; 208
 2ee:	aa 33       	cpi	r26, 0x3A	; 58
 2f0:	08 f0       	brcs	.+2      	; 0x2f4 <__utoa_common+0x20>
 2f2:	a9 5d       	subi	r26, 0xD9	; 217
 2f4:	a1 93       	st	Z+, r26
 2f6:	00 97       	sbiw	r24, 0x00	; 0
 2f8:	79 f7       	brne	.-34     	; 0x2d8 <__utoa_common+0x4>
 2fa:	b1 11       	cpse	r27, r1
 2fc:	b1 93       	st	Z+, r27
 2fe:	11 92       	st	Z+, r1
 300:	cb 01       	movw	r24, r22
 302:	0c 94 83 01 	jmp	0x306	; 0x306 <strrev>

00000306 <strrev>:
 306:	dc 01       	movw	r26, r24
 308:	fc 01       	movw	r30, r24
 30a:	67 2f       	mov	r22, r23
 30c:	71 91       	ld	r23, Z+
 30e:	77 23       	and	r23, r23
 310:	e1 f7       	brne	.-8      	; 0x30a <strrev+0x4>
 312:	32 97       	sbiw	r30, 0x02	; 2
 314:	04 c0       	rjmp	.+8      	; 0x31e <strrev+0x18>
 316:	7c 91       	ld	r23, X
 318:	6d 93       	st	X+, r22
 31a:	70 83       	st	Z, r23
 31c:	62 91       	ld	r22, -Z
 31e:	ae 17       	cp	r26, r30
 320:	bf 07       	cpc	r27, r31
 322:	c8 f3       	brcs	.-14     	; 0x316 <strrev+0x10>
 324:	08 95       	ret

00000326 <_exit>:
 326:	f8 94       	cli

00000328 <__stop_program>:
 328:	ff cf       	rjmp	.-2      	; 0x328 <__stop_program>
