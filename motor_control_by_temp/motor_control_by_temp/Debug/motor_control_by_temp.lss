
motor_control_by_temp.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  00000116  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000030  00000000  00000000  00000146  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000000f0  00000000  00000000  00000176  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000a6  00000000  00000000  00000266  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000000f2  00000000  00000000  0000030c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000044  00000000  00000000  00000400  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000166  00000000  00000000  00000444  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000035  00000000  00000000  000005aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000020  00000000  00000000  000005df  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 42 00 	call	0x84	; 0x84 <main>
  64:	0c 94 5f 00 	jmp	0xbe	; 0xbe <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <adc_init>:



void adc_init()
{
	ADMUX |= (1<<REFS0);//set AVCC 5V as Vref
  6c:	3e 9a       	sbi	0x07, 6	; 7
	ADCSRA |= (1<<ADEN);//Enable ADC Module
  6e:	37 9a       	sbi	0x06, 7	; 6
	ADCSRA |= (1<<ADPS0)|(1<<ADPS1)|(1<<ADPS2);// set ADC prescaler to 128
  70:	86 b1       	in	r24, 0x06	; 6
  72:	87 60       	ori	r24, 0x07	; 7
  74:	86 b9       	out	0x06, r24	; 6
  76:	08 95       	ret

00000078 <adc_Read>:
	
}

int adc_Read()
{
	ADCSRA |= (1<<ADSC);//ADC Start convertion
  78:	36 9a       	sbi	0x06, 6	; 6
	while(ADCSRA & (1<<ADSC));//wait for conversion complete
  7a:	36 99       	sbic	0x06, 6	; 6
  7c:	fe cf       	rjmp	.-4      	; 0x7a <adc_Read+0x2>
	return ADC;//read adc value
  7e:	84 b1       	in	r24, 0x04	; 4
  80:	95 b1       	in	r25, 0x05	; 5
}
  82:	08 95       	ret

00000084 <main>:



int main(void)
{
	DDRC= 0b11000000;
  84:	80 ec       	ldi	r24, 0xC0	; 192
  86:	84 bb       	out	0x14, r24	; 20
	
	MCUCSR |= 1<<JTD;
  88:	84 b7       	in	r24, 0x34	; 52
  8a:	80 68       	ori	r24, 0x80	; 128
  8c:	84 bf       	out	0x34, r24	; 52
	MCUCSR |= 1<<JTD;
  8e:	84 b7       	in	r24, 0x34	; 52
  90:	80 68       	ori	r24, 0x80	; 128
  92:	84 bf       	out	0x34, r24	; 52
	
	adc_init ();//ADC initialization
  94:	0e 94 36 00 	call	0x6c	; 0x6c <adc_init>
			PORTC=0;
		}
		
		else   //when temp > 27C
		{
			PORTC=1;
  98:	c1 e0       	ldi	r28, 0x01	; 1
	
	
	
	while(1)
	{
      int adc_val = adc_Read();
  9a:	0e 94 3c 00 	call	0x78	; 0x78 <adc_Read>
		
		if( adc_val > 45 && adc_val < 58 ) // when 27C > Temp > 22C
  9e:	9c 01       	movw	r18, r24
  a0:	2e 52       	subi	r18, 0x2E	; 46
  a2:	31 09       	sbc	r19, r1
  a4:	2c 30       	cpi	r18, 0x0C	; 12
  a6:	31 05       	cpc	r19, r1
  a8:	20 f4       	brcc	.+8      	; 0xb2 <main+0x2e>
		{
			PORTC |= (1<<PC0) | (1<<PC1);
  aa:	85 b3       	in	r24, 0x15	; 21
  ac:	83 60       	ori	r24, 0x03	; 3
  ae:	85 bb       	out	0x15, r24	; 21
  b0:	f4 cf       	rjmp	.-24     	; 0x9a <main+0x16>
		}
		
		else if(adc_val <= 45)    //when temp <= 22C
  b2:	8e 97       	sbiw	r24, 0x2e	; 46
  b4:	14 f4       	brge	.+4      	; 0xba <main+0x36>
		{
			PORTC=0;
  b6:	15 ba       	out	0x15, r1	; 21
  b8:	f0 cf       	rjmp	.-32     	; 0x9a <main+0x16>
		}
		
		else   //when temp > 27C
		{
			PORTC=1;
  ba:	c5 bb       	out	0x15, r28	; 21
  bc:	ee cf       	rjmp	.-36     	; 0x9a <main+0x16>

000000be <_exit>:
  be:	f8 94       	cli

000000c0 <__stop_program>:
  c0:	ff cf       	rjmp	.-2      	; 0xc0 <__stop_program>
