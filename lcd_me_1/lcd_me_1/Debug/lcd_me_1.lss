
lcd_me_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000660  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  00000660  000006f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000014  0080006e  0080006e  00000702  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000702  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000a8  00000000  00000000  00000732  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b0e  00000000  00000000  000007da  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000464  00000000  00000000  000012e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000042d  00000000  00000000  0000174c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000168  00000000  00000000  00001b7c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000296  00000000  00000000  00001ce4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000697  00000000  00000000  00001f7a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000d0  00000000  00000000  00002611  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e6       	ldi	r30, 0x60	; 96
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 36       	cpi	r26, 0x6E	; 110
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ae e6       	ldi	r26, 0x6E	; 110
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 38       	cpi	r26, 0x82	; 130
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 20 01 	call	0x240	; 0x240 <main>
  8a:	0c 94 2e 03 	jmp	0x65c	; 0x65c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <toggle_e>:

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
  92:	96 9a       	sbi	0x12, 6	; 18
    lcd_e_delay();
  94:	00 c0       	rjmp	.+0      	; 0x96 <toggle_e+0x4>
    lcd_e_low();
  96:	96 98       	cbi	0x12, 6	; 18
  98:	08 95       	ret

0000009a <lcd_write>:
                 0: write instruction
Returns:  none
*************************************************************************/
#if LCD_IO_MODE
static void lcd_write(uint8_t data,uint8_t rs) 
{
  9a:	cf 93       	push	r28
  9c:	c8 2f       	mov	r28, r24
    unsigned char dataBits ;


    if (rs) {   /* write data        (RS=1, RW=0) */
  9e:	66 23       	and	r22, r22
  a0:	11 f0       	breq	.+4      	; 0xa6 <lcd_write+0xc>
       lcd_rs_high();
  a2:	94 9a       	sbi	0x12, 4	; 18
  a4:	01 c0       	rjmp	.+2      	; 0xa8 <lcd_write+0xe>
    } else {    /* write instruction (RS=0, RW=0) */
       lcd_rs_low();
  a6:	94 98       	cbi	0x12, 4	; 18
    }
    lcd_rw_low();
  a8:	95 98       	cbi	0x12, 5	; 18
        LCD_DATA0_PORT = dataBits | 0x0F;
    }
    else
    {
        /* configure data pins as output */
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
  aa:	a4 9a       	sbi	0x14, 4	; 20
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
  ac:	a5 9a       	sbi	0x14, 5	; 20
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
  ae:	a6 9a       	sbi	0x14, 6	; 20
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
  b0:	a7 9a       	sbi	0x14, 7	; 20
        
        /* output high nibble first */
        LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
  b2:	af 98       	cbi	0x15, 7	; 21
        LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
  b4:	ae 98       	cbi	0x15, 6	; 21
        LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
  b6:	ad 98       	cbi	0x15, 5	; 21
        LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
  b8:	ac 98       	cbi	0x15, 4	; 21
    	if(data & 0x80) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
  ba:	cc 23       	and	r28, r28
  bc:	0c f4       	brge	.+2      	; 0xc0 <lcd_write+0x26>
  be:	af 9a       	sbi	0x15, 7	; 21
    	if(data & 0x40) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
  c0:	c6 fd       	sbrc	r28, 6
  c2:	ae 9a       	sbi	0x15, 6	; 21
    	if(data & 0x20) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
  c4:	c5 fd       	sbrc	r28, 5
  c6:	ad 9a       	sbi	0x15, 5	; 21
    	if(data & 0x10) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);   
  c8:	c4 fd       	sbrc	r28, 4
  ca:	ac 9a       	sbi	0x15, 4	; 21
        lcd_e_toggle();
  cc:	0e 94 49 00 	call	0x92	; 0x92 <toggle_e>
        
        /* output low nibble */
        LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
  d0:	af 98       	cbi	0x15, 7	; 21
        LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
  d2:	ae 98       	cbi	0x15, 6	; 21
        LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
  d4:	ad 98       	cbi	0x15, 5	; 21
        LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
  d6:	ac 98       	cbi	0x15, 4	; 21
    	if(data & 0x08) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
  d8:	c3 fd       	sbrc	r28, 3
  da:	af 9a       	sbi	0x15, 7	; 21
    	if(data & 0x04) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
  dc:	c2 fd       	sbrc	r28, 2
  de:	ae 9a       	sbi	0x15, 6	; 21
    	if(data & 0x02) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
  e0:	c1 fd       	sbrc	r28, 1
  e2:	ad 9a       	sbi	0x15, 5	; 21
    	if(data & 0x01) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
  e4:	c0 fd       	sbrc	r28, 0
  e6:	ac 9a       	sbi	0x15, 4	; 21
        lcd_e_toggle();        
  e8:	0e 94 49 00 	call	0x92	; 0x92 <toggle_e>
        
        /* all data pins high (inactive) */
        LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
  ec:	ac 9a       	sbi	0x15, 4	; 21
        LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
  ee:	ad 9a       	sbi	0x15, 5	; 21
        LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
  f0:	ae 9a       	sbi	0x15, 6	; 21
        LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
  f2:	af 9a       	sbi	0x15, 7	; 21
    }
}
  f4:	cf 91       	pop	r28
  f6:	08 95       	ret

000000f8 <lcd_read>:
static uint8_t lcd_read(uint8_t rs) 
{
    uint8_t data;
    
    
    if (rs)
  f8:	88 23       	and	r24, r24
  fa:	11 f0       	breq	.+4      	; 0x100 <lcd_read+0x8>
        lcd_rs_high();                       /* RS=1: read data      */
  fc:	94 9a       	sbi	0x12, 4	; 18
  fe:	01 c0       	rjmp	.+2      	; 0x102 <lcd_read+0xa>
    else
        lcd_rs_low();                        /* RS=0: read busy flag */
 100:	94 98       	cbi	0x12, 4	; 18
    lcd_rw_high();                           /* RW=1  read mode      */
 102:	95 9a       	sbi	0x12, 5	; 18
        lcd_e_low();
    }
    else
    {
        /* configure data pins as input */
        DDR(LCD_DATA0_PORT) &= ~_BV(LCD_DATA0_PIN);
 104:	a4 98       	cbi	0x14, 4	; 20
        DDR(LCD_DATA1_PORT) &= ~_BV(LCD_DATA1_PIN);
 106:	a5 98       	cbi	0x14, 5	; 20
        DDR(LCD_DATA2_PORT) &= ~_BV(LCD_DATA2_PIN);
 108:	a6 98       	cbi	0x14, 6	; 20
        DDR(LCD_DATA3_PORT) &= ~_BV(LCD_DATA3_PIN);
 10a:	a7 98       	cbi	0x14, 7	; 20
                
        /* read high nibble first */
        lcd_e_high();
 10c:	96 9a       	sbi	0x12, 6	; 18
        lcd_e_delay();        
 10e:	00 c0       	rjmp	.+0      	; 0x110 <lcd_read+0x18>
        data = 0;
        if ( PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x10;
 110:	9c 99       	sbic	0x13, 4	; 19
 112:	02 c0       	rjmp	.+4      	; 0x118 <lcd_read+0x20>
        DDR(LCD_DATA3_PORT) &= ~_BV(LCD_DATA3_PIN);
                
        /* read high nibble first */
        lcd_e_high();
        lcd_e_delay();        
        data = 0;
 114:	80 e0       	ldi	r24, 0x00	; 0
 116:	01 c0       	rjmp	.+2      	; 0x11a <lcd_read+0x22>
        if ( PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x10;
 118:	80 e1       	ldi	r24, 0x10	; 16
        if ( PIN(LCD_DATA1_PORT) & _BV(LCD_DATA1_PIN) ) data |= 0x20;
 11a:	9d 99       	sbic	0x13, 5	; 19
 11c:	80 62       	ori	r24, 0x20	; 32
        if ( PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x40;
 11e:	9e 99       	sbic	0x13, 6	; 19
 120:	80 64       	ori	r24, 0x40	; 64
        if ( PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x80;
 122:	9f 99       	sbic	0x13, 7	; 19
 124:	80 68       	ori	r24, 0x80	; 128
        lcd_e_low();
 126:	96 98       	cbi	0x12, 6	; 18

        lcd_e_delay();                       /* Enable 500ns low       */
 128:	00 c0       	rjmp	.+0      	; 0x12a <lcd_read+0x32>
    
        /* read low nibble */    
        lcd_e_high();
 12a:	96 9a       	sbi	0x12, 6	; 18
        lcd_e_delay();
 12c:	00 c0       	rjmp	.+0      	; 0x12e <lcd_read+0x36>
        if ( PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x01;
 12e:	9c 99       	sbic	0x13, 4	; 19
 130:	81 60       	ori	r24, 0x01	; 1
        if ( PIN(LCD_DATA1_PORT) & _BV(LCD_DATA1_PIN) ) data |= 0x02;
 132:	9d 99       	sbic	0x13, 5	; 19
 134:	82 60       	ori	r24, 0x02	; 2
        if ( PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x04;
 136:	9e 99       	sbic	0x13, 6	; 19
 138:	84 60       	ori	r24, 0x04	; 4
        if ( PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x08;        
 13a:	9f 99       	sbic	0x13, 7	; 19
 13c:	88 60       	ori	r24, 0x08	; 8
        lcd_e_low();
 13e:	96 98       	cbi	0x12, 6	; 18
    }
    return data;
}
 140:	08 95       	ret

00000142 <lcd_waitbusy>:

{
    register uint8_t c;
    
    /* wait until busy flag is cleared */
    while ( (c=lcd_read(0)) & (1<<LCD_BUSY)) {}
 142:	80 e0       	ldi	r24, 0x00	; 0
 144:	0e 94 7c 00 	call	0xf8	; 0xf8 <lcd_read>
 148:	88 23       	and	r24, r24
 14a:	dc f3       	brlt	.-10     	; 0x142 <lcd_waitbusy>
 delay loop for small accurate delays: 16-bit counter, 4 cycles/loop
*************************************************************************/
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
 14c:	00 c0       	rjmp	.+0      	; 0x14e <lcd_waitbusy+0xc>
    
    /* the address counter is updated 4us after the busy flag is cleared */
    delay(2);

    /* now read the address counter */
    return (lcd_read(0));  // return address counter
 14e:	80 e0       	ldi	r24, 0x00	; 0
 150:	0e 94 7c 00 	call	0xf8	; 0xf8 <lcd_read>
    
}/* lcd_waitbusy */
 154:	08 95       	ret

00000156 <lcd_command>:
Send LCD controller instruction command
Input:   instruction to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_command(uint8_t cmd)
{
 156:	cf 93       	push	r28
 158:	c8 2f       	mov	r28, r24
    lcd_waitbusy();
 15a:	0e 94 a1 00 	call	0x142	; 0x142 <lcd_waitbusy>
    lcd_write(cmd,0);
 15e:	60 e0       	ldi	r22, 0x00	; 0
 160:	8c 2f       	mov	r24, r28
 162:	0e 94 4d 00 	call	0x9a	; 0x9a <lcd_write>
}
 166:	cf 91       	pop	r28
 168:	08 95       	ret

0000016a <lcd_gotoxy>:
{
#if LCD_LINES==1
    lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
#endif
#if LCD_LINES==2
    if ( y==0 ) 
 16a:	61 11       	cpse	r22, r1
 16c:	04 c0       	rjmp	.+8      	; 0x176 <lcd_gotoxy+0xc>
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
 16e:	80 58       	subi	r24, 0x80	; 128
 170:	0e 94 ab 00 	call	0x156	; 0x156 <lcd_command>
 174:	08 95       	ret
    else
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE2+x);
 176:	80 54       	subi	r24, 0x40	; 64
 178:	0e 94 ab 00 	call	0x156	; 0x156 <lcd_command>
 17c:	08 95       	ret

0000017e <lcd_clrscr>:
/*************************************************************************
Clear display and set cursor to home position
*************************************************************************/
void lcd_clrscr(void)
{
    lcd_command(1<<LCD_CLR);
 17e:	81 e0       	ldi	r24, 0x01	; 1
 180:	0e 94 ab 00 	call	0x156	; 0x156 <lcd_command>
 184:	08 95       	ret

00000186 <lcd_putc>:
Display character at current cursor position 
Input:    character to be displayed                                       
Returns:  none
*************************************************************************/
void lcd_putc(char c)
{
 186:	cf 93       	push	r28
 188:	c8 2f       	mov	r28, r24
    uint8_t pos;


    pos = lcd_waitbusy();   // read busy-flag and address counter
 18a:	0e 94 a1 00 	call	0x142	; 0x142 <lcd_waitbusy>
    if (c=='\n')
 18e:	ca 30       	cpi	r28, 0x0A	; 10
 190:	49 f4       	brne	.+18     	; 0x1a4 <lcd_putc+0x1e>

#if LCD_LINES==1
    addressCounter = 0;
#endif
#if LCD_LINES==2
    if ( pos < (LCD_START_LINE2) )
 192:	80 34       	cpi	r24, 0x40	; 64
 194:	10 f4       	brcc	.+4      	; 0x19a <lcd_putc+0x14>
        addressCounter = LCD_START_LINE2;
 196:	80 e4       	ldi	r24, 0x40	; 64
 198:	01 c0       	rjmp	.+2      	; 0x19c <lcd_putc+0x16>
    else
        addressCounter = LCD_START_LINE1;
 19a:	80 e0       	ldi	r24, 0x00	; 0
        addressCounter = LCD_START_LINE4;
    else 
        addressCounter = LCD_START_LINE1;
#endif
#endif
    lcd_command((1<<LCD_DDRAM)+addressCounter);
 19c:	80 58       	subi	r24, 0x80	; 128
 19e:	0e 94 ab 00 	call	0x156	; 0x156 <lcd_command>
 1a2:	04 c0       	rjmp	.+8      	; 0x1ac <lcd_putc+0x26>
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1,0);
        }
#endif
        lcd_waitbusy();
#endif
        lcd_write(c, 1);
 1a4:	61 e0       	ldi	r22, 0x01	; 1
 1a6:	8c 2f       	mov	r24, r28
 1a8:	0e 94 4d 00 	call	0x9a	; 0x9a <lcd_write>
    }

}/* lcd_putc */
 1ac:	cf 91       	pop	r28
 1ae:	08 95       	ret

000001b0 <lcd_puts>:
Input:    string to be displayed
Returns:  none
*************************************************************************/
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
 1b0:	cf 93       	push	r28
 1b2:	df 93       	push	r29
    register char c;

    while ( (c = *s++) ) {
 1b4:	ec 01       	movw	r28, r24
 1b6:	21 96       	adiw	r28, 0x01	; 1
 1b8:	fc 01       	movw	r30, r24
 1ba:	80 81       	ld	r24, Z
 1bc:	88 23       	and	r24, r24
 1be:	29 f0       	breq	.+10     	; 0x1ca <lcd_puts+0x1a>
        lcd_putc(c);
 1c0:	0e 94 c3 00 	call	0x186	; 0x186 <lcd_putc>
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = *s++) ) {
 1c4:	89 91       	ld	r24, Y+
 1c6:	81 11       	cpse	r24, r1
 1c8:	fb cf       	rjmp	.-10     	; 0x1c0 <lcd_puts+0x10>
        lcd_putc(c);
    }

}/* lcd_puts */
 1ca:	df 91       	pop	r29
 1cc:	cf 91       	pop	r28
 1ce:	08 95       	ret

000001d0 <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 1d0:	cf 93       	push	r28
 1d2:	c8 2f       	mov	r28, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 1d4:	8c 9a       	sbi	0x11, 4	; 17
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 1d6:	8d 9a       	sbi	0x11, 5	; 17
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 1d8:	8e 9a       	sbi	0x11, 6	; 17
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 1da:	a4 9a       	sbi	0x14, 4	; 20
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 1dc:	a5 9a       	sbi	0x14, 5	; 20
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 1de:	a6 9a       	sbi	0x14, 6	; 20
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 1e0:	a7 9a       	sbi	0x14, 7	; 20
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 1e2:	e0 ea       	ldi	r30, 0xA0	; 160
 1e4:	ff e0       	ldi	r31, 0x0F	; 15
 1e6:	31 97       	sbiw	r30, 0x01	; 1
 1e8:	f1 f7       	brne	.-4      	; 0x1e6 <lcd_init+0x16>
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
    }
    delay(16000);        /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);  // _BV(LCD_FUNCTION)>>4;
 1ea:	ad 9a       	sbi	0x15, 5	; 21
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
 1ec:	ac 9a       	sbi	0x15, 4	; 21
    lcd_e_toggle();
 1ee:	0e 94 49 00 	call	0x92	; 0x92 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 1f2:	e0 ee       	ldi	r30, 0xE0	; 224
 1f4:	f4 e0       	ldi	r31, 0x04	; 4
 1f6:	31 97       	sbiw	r30, 0x01	; 1
 1f8:	f1 f7       	brne	.-4      	; 0x1f6 <lcd_init+0x26>
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
    lcd_e_toggle();
    delay(4992);         /* delay, busy flag can't be checked here */
   
    /* repeat last command */ 
    lcd_e_toggle();      
 1fa:	0e 94 49 00 	call	0x92	; 0x92 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 1fe:	e0 e1       	ldi	r30, 0x10	; 16
 200:	f0 e0       	ldi	r31, 0x00	; 0
 202:	31 97       	sbiw	r30, 0x01	; 1
 204:	f1 f7       	brne	.-4      	; 0x202 <lcd_init+0x32>
    /* repeat last command */ 
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */
    
    /* repeat last command a third time */
    lcd_e_toggle();      
 206:	0e 94 49 00 	call	0x92	; 0x92 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 20a:	e0 e1       	ldi	r30, 0x10	; 16
 20c:	f0 e0       	ldi	r31, 0x00	; 0
 20e:	31 97       	sbiw	r30, 0x01	; 1
 210:	f1 f7       	brne	.-4      	; 0x20e <lcd_init+0x3e>
    /* repeat last command a third time */
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
 212:	ac 98       	cbi	0x15, 4	; 21
    lcd_e_toggle();
 214:	0e 94 49 00 	call	0x92	; 0x92 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 218:	e0 e1       	ldi	r30, 0x10	; 16
 21a:	f0 e0       	ldi	r31, 0x00	; 0
 21c:	31 97       	sbiw	r30, 0x01	; 1
 21e:	f1 f7       	brne	.-4      	; 0x21c <lcd_init+0x4c>
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
 220:	88 e2       	ldi	r24, 0x28	; 40
 222:	0e 94 ab 00 	call	0x156	; 0x156 <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
 226:	88 e0       	ldi	r24, 0x08	; 8
 228:	0e 94 ab 00 	call	0x156	; 0x156 <lcd_command>
    lcd_clrscr();                           /* display clear                */ 
 22c:	0e 94 bf 00 	call	0x17e	; 0x17e <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
 230:	86 e0       	ldi	r24, 0x06	; 6
 232:	0e 94 ab 00 	call	0x156	; 0x156 <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
 236:	8c 2f       	mov	r24, r28
 238:	0e 94 ab 00 	call	0x156	; 0x156 <lcd_command>

}/* lcd_init */
 23c:	cf 91       	pop	r28
 23e:	08 95       	ret

00000240 <main>:


char ch[20];

int main(void)
{
 240:	cf 93       	push	r28
 242:	df 93       	push	r29
 244:	cd b7       	in	r28, 0x3d	; 61
 246:	de b7       	in	r29, 0x3e	; 62
 248:	28 97       	sbiw	r28, 0x08	; 8
 24a:	0f b6       	in	r0, 0x3f	; 63
 24c:	f8 94       	cli
 24e:	de bf       	out	0x3e, r29	; 62
 250:	0f be       	out	0x3f, r0	; 63
 252:	cd bf       	out	0x3d, r28	; 61
	MCUCSR |= 1<<JTD;
 254:	84 b7       	in	r24, 0x34	; 52
 256:	80 68       	ori	r24, 0x80	; 128
 258:	84 bf       	out	0x34, r24	; 52
	MCUCSR |= 1<<JTD;
 25a:	84 b7       	in	r24, 0x34	; 52
 25c:	80 68       	ori	r24, 0x80	; 128
 25e:	84 bf       	out	0x34, r24	; 52
	
	long long i,j;
	
	
	
	lcd_init (LCD_DISP_ON);
 260:	8c e0       	ldi	r24, 0x0C	; 12
 262:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <lcd_init>
	
	lcd_puts("shuhan");
 266:	80 e6       	ldi	r24, 0x60	; 96
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <lcd_puts>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 26e:	2f eb       	ldi	r18, 0xBF	; 191
 270:	87 e2       	ldi	r24, 0x27	; 39
 272:	99 e0       	ldi	r25, 0x09	; 9
 274:	21 50       	subi	r18, 0x01	; 1
 276:	80 40       	sbci	r24, 0x00	; 0
 278:	90 40       	sbci	r25, 0x00	; 0
 27a:	e1 f7       	brne	.-8      	; 0x274 <main+0x34>
 27c:	00 c0       	rjmp	.+0      	; 0x27e <main+0x3e>
 27e:	00 00       	nop
	
	_delay_ms(3000);
	
	lcd_clrscr();
 280:	0e 94 bf 00 	call	0x17e	; 0x17e <lcd_clrscr>
	
	
   
	while(1)
    {
		lcd_gotoxy(1,1);
 284:	61 e0       	ldi	r22, 0x01	; 1
 286:	81 e0       	ldi	r24, 0x01	; 1
 288:	0e 94 b5 00 	call	0x16a	; 0x16a <lcd_gotoxy>
		lcd_putc('0');
 28c:	80 e3       	ldi	r24, 0x30	; 48
 28e:	0e 94 c3 00 	call	0x186	; 0x186 <lcd_putc>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 292:	4a e0       	ldi	r20, 0x0A	; 10
 294:	6e e6       	ldi	r22, 0x6E	; 110
 296:	70 e0       	ldi	r23, 0x00	; 0
 298:	80 e0       	ldi	r24, 0x00	; 0
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <__itoa_ncheck>
		
       for(i=1  ; i<=99999999 ; i++)
	   {
		   j=i-1;
		   itoa(j,ch,10);
		   lcd_gotoxy(0,0);
 2a0:	60 e0       	ldi	r22, 0x00	; 0
 2a2:	80 e0       	ldi	r24, 0x00	; 0
 2a4:	0e 94 b5 00 	call	0x16a	; 0x16a <lcd_gotoxy>
		   lcd_puts(ch);
 2a8:	8e e6       	ldi	r24, 0x6E	; 110
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <lcd_puts>
 2b0:	4a e0       	ldi	r20, 0x0A	; 10
 2b2:	6e e6       	ldi	r22, 0x6E	; 110
 2b4:	70 e0       	ldi	r23, 0x00	; 0
 2b6:	81 e0       	ldi	r24, 0x01	; 1
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <__itoa_ncheck>
		   
		   itoa(i,ch,10);
		   lcd_gotoxy(0,1);
 2be:	61 e0       	ldi	r22, 0x01	; 1
 2c0:	80 e0       	ldi	r24, 0x00	; 0
 2c2:	0e 94 b5 00 	call	0x16a	; 0x16a <lcd_gotoxy>
		   lcd_puts(ch);
 2c6:	8e e6       	ldi	r24, 0x6E	; 110
 2c8:	90 e0       	ldi	r25, 0x00	; 0
 2ca:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <lcd_puts>
	while(1)
    {
		lcd_gotoxy(1,1);
		lcd_putc('0');
		
       for(i=1  ; i<=99999999 ; i++)
 2ce:	11 e0       	ldi	r17, 0x01	; 1
 2d0:	91 2c       	mov	r9, r1
 2d2:	19 82       	std	Y+1, r1	; 0x01
 2d4:	1a 82       	std	Y+2, r1	; 0x02
 2d6:	1b 82       	std	Y+3, r1	; 0x03
 2d8:	1c 82       	std	Y+4, r1	; 0x04
 2da:	1d 82       	std	Y+5, r1	; 0x05
 2dc:	1e 82       	std	Y+6, r1	; 0x06
	   {
		   j=i-1;
 2de:	20 e0       	ldi	r18, 0x00	; 0
 2e0:	30 e0       	ldi	r19, 0x00	; 0
 2e2:	40 e0       	ldi	r20, 0x00	; 0
 2e4:	50 e0       	ldi	r21, 0x00	; 0
 2e6:	60 e0       	ldi	r22, 0x00	; 0
 2e8:	70 e0       	ldi	r23, 0x00	; 0
 2ea:	80 e0       	ldi	r24, 0x00	; 0
 2ec:	90 e0       	ldi	r25, 0x00	; 0
 2ee:	18 87       	std	Y+8, r17	; 0x08
 2f0:	9f 82       	std	Y+7, r9	; 0x07
 2f2:	4e c0       	rjmp	.+156    	; 0x390 <main+0x150>
 2f4:	4a e0       	ldi	r20, 0x0A	; 10
 2f6:	6e e6       	ldi	r22, 0x6E	; 110
 2f8:	70 e0       	ldi	r23, 0x00	; 0
 2fa:	c1 01       	movw	r24, r2
 2fc:	01 97       	sbiw	r24, 0x01	; 1
 2fe:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <__itoa_ncheck>
		   itoa(j,ch,10);
		   lcd_gotoxy(0,0);
 302:	60 e0       	ldi	r22, 0x00	; 0
 304:	80 e0       	ldi	r24, 0x00	; 0
 306:	0e 94 b5 00 	call	0x16a	; 0x16a <lcd_gotoxy>
		   lcd_puts(ch);
 30a:	8e e6       	ldi	r24, 0x6E	; 110
 30c:	90 e0       	ldi	r25, 0x00	; 0
 30e:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <lcd_puts>
 312:	4a e0       	ldi	r20, 0x0A	; 10
 314:	6e e6       	ldi	r22, 0x6E	; 110
 316:	70 e0       	ldi	r23, 0x00	; 0
 318:	c1 01       	movw	r24, r2
 31a:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <__itoa_ncheck>
		   
		   itoa(i,ch,10);
		   lcd_gotoxy(0,1);
 31e:	61 e0       	ldi	r22, 0x01	; 1
 320:	80 e0       	ldi	r24, 0x00	; 0
 322:	0e 94 b5 00 	call	0x16a	; 0x16a <lcd_gotoxy>
		   lcd_puts(ch);
 326:	8e e6       	ldi	r24, 0x6E	; 110
 328:	90 e0       	ldi	r25, 0x00	; 0
 32a:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <lcd_puts>
		   
		   if(i%100==0)
 32e:	0f 2e       	mov	r0, r31
 330:	f4 e6       	ldi	r31, 0x64	; 100
 332:	af 2e       	mov	r10, r31
 334:	f0 2d       	mov	r31, r0
 336:	b1 2c       	mov	r11, r1
 338:	c1 2c       	mov	r12, r1
 33a:	d1 2c       	mov	r13, r1
 33c:	e1 2c       	mov	r14, r1
 33e:	f1 2c       	mov	r15, r1
 340:	00 e0       	ldi	r16, 0x00	; 0
 342:	10 e0       	ldi	r17, 0x00	; 0
 344:	22 2d       	mov	r18, r2
 346:	33 2d       	mov	r19, r3
 348:	44 2d       	mov	r20, r4
 34a:	55 2d       	mov	r21, r5
 34c:	66 2d       	mov	r22, r6
 34e:	77 2d       	mov	r23, r7
 350:	88 2d       	mov	r24, r8
 352:	99 2d       	mov	r25, r9
 354:	0e 94 0a 02 	call	0x414	; 0x414 <__moddi3>
 358:	a0 e0       	ldi	r26, 0x00	; 0
 35a:	0e 94 ed 02 	call	0x5da	; 0x5da <__cmpdi2_s8>
 35e:	41 f4       	brne	.+16     	; 0x370 <main+0x130>
		   {
			   lcd_gotoxy(9,1);
 360:	61 e0       	ldi	r22, 0x01	; 1
 362:	89 e0       	ldi	r24, 0x09	; 9
 364:	0e 94 b5 00 	call	0x16a	; 0x16a <lcd_gotoxy>
			   lcd_puts("muhaha");
 368:	87 e6       	ldi	r24, 0x67	; 103
 36a:	90 e0       	ldi	r25, 0x00	; 0
 36c:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <lcd_puts>
		lcd_gotoxy(1,1);
		lcd_putc('0');
		
       for(i=1  ; i<=99999999 ; i++)
	   {
		   j=i-1;
 370:	28 85       	ldd	r18, Y+8	; 0x08
 372:	3f 81       	ldd	r19, Y+7	; 0x07
 374:	49 81       	ldd	r20, Y+1	; 0x01
 376:	5a 81       	ldd	r21, Y+2	; 0x02
 378:	6b 81       	ldd	r22, Y+3	; 0x03
 37a:	7c 81       	ldd	r23, Y+4	; 0x04
 37c:	8d 81       	ldd	r24, Y+5	; 0x05
 37e:	9e 81       	ldd	r25, Y+6	; 0x06
	while(1)
    {
		lcd_gotoxy(1,1);
		lcd_putc('0');
		
       for(i=1  ; i<=99999999 ; i++)
 380:	28 86       	std	Y+8, r2	; 0x08
 382:	3f 82       	std	Y+7, r3	; 0x07
 384:	49 82       	std	Y+1, r4	; 0x01
 386:	5a 82       	std	Y+2, r5	; 0x02
 388:	6b 82       	std	Y+3, r6	; 0x03
 38a:	7c 82       	std	Y+4, r7	; 0x04
 38c:	8d 82       	std	Y+5, r8	; 0x05
 38e:	9e 82       	std	Y+6, r9	; 0x06
			   lcd_puts("muhaha");
		   }
		   
		   
		   
		    if(j%100==0)
 390:	0f 2e       	mov	r0, r31
 392:	f4 e6       	ldi	r31, 0x64	; 100
 394:	af 2e       	mov	r10, r31
 396:	f0 2d       	mov	r31, r0
 398:	b1 2c       	mov	r11, r1
 39a:	c1 2c       	mov	r12, r1
 39c:	d1 2c       	mov	r13, r1
 39e:	e1 2c       	mov	r14, r1
 3a0:	f1 2c       	mov	r15, r1
 3a2:	00 e0       	ldi	r16, 0x00	; 0
 3a4:	10 e0       	ldi	r17, 0x00	; 0
 3a6:	0e 94 0a 02 	call	0x414	; 0x414 <__moddi3>
 3aa:	a0 e0       	ldi	r26, 0x00	; 0
 3ac:	0e 94 ed 02 	call	0x5da	; 0x5da <__cmpdi2_s8>
 3b0:	41 f4       	brne	.+16     	; 0x3c2 <main+0x182>
		    {
			    lcd_gotoxy(9,0);
 3b2:	60 e0       	ldi	r22, 0x00	; 0
 3b4:	89 e0       	ldi	r24, 0x09	; 9
 3b6:	0e 94 b5 00 	call	0x16a	; 0x16a <lcd_gotoxy>
			    lcd_puts("muhaha");
 3ba:	87 e6       	ldi	r24, 0x67	; 103
 3bc:	90 e0       	ldi	r25, 0x00	; 0
 3be:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <lcd_puts>
 3c2:	ef e5       	ldi	r30, 0x5F	; 95
 3c4:	fa ee       	ldi	r31, 0xEA	; 234
 3c6:	20 e0       	ldi	r18, 0x00	; 0
 3c8:	e1 50       	subi	r30, 0x01	; 1
 3ca:	f0 40       	sbci	r31, 0x00	; 0
 3cc:	20 40       	sbci	r18, 0x00	; 0
 3ce:	e1 f7       	brne	.-8      	; 0x3c8 <main+0x188>
 3d0:	00 c0       	rjmp	.+0      	; 0x3d2 <main+0x192>
 3d2:	00 00       	nop
		   
		   
		   
		   
		   _delay_ms(300);
		   lcd_clrscr();
 3d4:	0e 94 bf 00 	call	0x17e	; 0x17e <lcd_clrscr>
	while(1)
    {
		lcd_gotoxy(1,1);
		lcd_putc('0');
		
       for(i=1  ; i<=99999999 ; i++)
 3d8:	28 85       	ldd	r18, Y+8	; 0x08
 3da:	3f 81       	ldd	r19, Y+7	; 0x07
 3dc:	49 81       	ldd	r20, Y+1	; 0x01
 3de:	5a 81       	ldd	r21, Y+2	; 0x02
 3e0:	6b 81       	ldd	r22, Y+3	; 0x03
 3e2:	7c 81       	ldd	r23, Y+4	; 0x04
 3e4:	8d 81       	ldd	r24, Y+5	; 0x05
 3e6:	9e 81       	ldd	r25, Y+6	; 0x06
 3e8:	a1 e0       	ldi	r26, 0x01	; 1
 3ea:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <__adddi3_s8>
 3ee:	22 2e       	mov	r2, r18
 3f0:	33 2e       	mov	r3, r19
 3f2:	44 2e       	mov	r4, r20
 3f4:	55 2e       	mov	r5, r21
 3f6:	66 2e       	mov	r6, r22
 3f8:	77 2e       	mov	r7, r23
 3fa:	88 2e       	mov	r8, r24
 3fc:	99 2e       	mov	r9, r25
 3fe:	21 15       	cp	r18, r1
 400:	31 4e       	sbci	r19, 0xE1	; 225
 402:	45 4f       	sbci	r20, 0xF5	; 245
 404:	55 40       	sbci	r21, 0x05	; 5
 406:	61 05       	cpc	r22, r1
 408:	71 05       	cpc	r23, r1
 40a:	81 05       	cpc	r24, r1
 40c:	91 05       	cpc	r25, r1
 40e:	09 f0       	breq	.+2      	; 0x412 <main+0x1d2>
 410:	71 cf       	rjmp	.-286    	; 0x2f4 <main+0xb4>
 412:	38 cf       	rjmp	.-400    	; 0x284 <main+0x44>

00000414 <__moddi3>:
 414:	68 94       	set
 416:	01 c0       	rjmp	.+2      	; 0x41a <__divdi3_moddi3>

00000418 <__divdi3>:
 418:	e8 94       	clt

0000041a <__divdi3_moddi3>:
 41a:	f9 2f       	mov	r31, r25
 41c:	f1 2b       	or	r31, r17
 41e:	12 f0       	brmi	.+4      	; 0x424 <__divdi3_moddi3+0xa>
 420:	0c 94 3e 02 	jmp	0x47c	; 0x47c <__udivdi3_umoddi3>
 424:	a0 e0       	ldi	r26, 0x00	; 0
 426:	b0 e0       	ldi	r27, 0x00	; 0
 428:	e8 e1       	ldi	r30, 0x18	; 24
 42a:	f2 e0       	ldi	r31, 0x02	; 2
 42c:	0c 94 b0 02 	jmp	0x560	; 0x560 <__prologue_saves__+0xc>
 430:	09 2e       	mov	r0, r25
 432:	05 94       	asr	r0
 434:	22 f4       	brpl	.+8      	; 0x43e <__divdi3_moddi3+0x24>
 436:	0e 94 9a 02 	call	0x534	; 0x534 <__negdi2>
 43a:	11 23       	and	r17, r17
 43c:	92 f4       	brpl	.+36     	; 0x462 <__divdi3_moddi3+0x48>
 43e:	f0 e8       	ldi	r31, 0x80	; 128
 440:	0f 26       	eor	r0, r31
 442:	ff ef       	ldi	r31, 0xFF	; 255
 444:	e0 94       	com	r14
 446:	f0 94       	com	r15
 448:	00 95       	com	r16
 44a:	10 95       	com	r17
 44c:	b0 94       	com	r11
 44e:	c0 94       	com	r12
 450:	d0 94       	com	r13
 452:	a1 94       	neg	r10
 454:	bf 0a       	sbc	r11, r31
 456:	cf 0a       	sbc	r12, r31
 458:	df 0a       	sbc	r13, r31
 45a:	ef 0a       	sbc	r14, r31
 45c:	ff 0a       	sbc	r15, r31
 45e:	0f 0b       	sbc	r16, r31
 460:	1f 0b       	sbc	r17, r31
 462:	0e 94 49 02 	call	0x492	; 0x492 <__udivmod64>
 466:	07 fc       	sbrc	r0, 7
 468:	0e 94 9a 02 	call	0x534	; 0x534 <__negdi2>
 46c:	cd b7       	in	r28, 0x3d	; 61
 46e:	de b7       	in	r29, 0x3e	; 62
 470:	ec e0       	ldi	r30, 0x0C	; 12
 472:	0c 94 cc 02 	jmp	0x598	; 0x598 <__epilogue_restores__+0xc>

00000476 <__umoddi3>:
 476:	68 94       	set
 478:	01 c0       	rjmp	.+2      	; 0x47c <__udivdi3_umoddi3>

0000047a <__udivdi3>:
 47a:	e8 94       	clt

0000047c <__udivdi3_umoddi3>:
 47c:	8f 92       	push	r8
 47e:	9f 92       	push	r9
 480:	cf 93       	push	r28
 482:	df 93       	push	r29
 484:	0e 94 49 02 	call	0x492	; 0x492 <__udivmod64>
 488:	df 91       	pop	r29
 48a:	cf 91       	pop	r28
 48c:	9f 90       	pop	r9
 48e:	8f 90       	pop	r8
 490:	08 95       	ret

00000492 <__udivmod64>:
 492:	88 24       	eor	r8, r8
 494:	99 24       	eor	r9, r9
 496:	f4 01       	movw	r30, r8
 498:	e4 01       	movw	r28, r8
 49a:	b0 e4       	ldi	r27, 0x40	; 64
 49c:	9f 93       	push	r25
 49e:	aa 27       	eor	r26, r26
 4a0:	9a 15       	cp	r25, r10
 4a2:	8b 04       	cpc	r8, r11
 4a4:	9c 04       	cpc	r9, r12
 4a6:	ed 05       	cpc	r30, r13
 4a8:	fe 05       	cpc	r31, r14
 4aa:	cf 05       	cpc	r28, r15
 4ac:	d0 07       	cpc	r29, r16
 4ae:	a1 07       	cpc	r26, r17
 4b0:	98 f4       	brcc	.+38     	; 0x4d8 <__udivmod64+0x46>
 4b2:	ad 2f       	mov	r26, r29
 4b4:	dc 2f       	mov	r29, r28
 4b6:	cf 2f       	mov	r28, r31
 4b8:	fe 2f       	mov	r31, r30
 4ba:	e9 2d       	mov	r30, r9
 4bc:	98 2c       	mov	r9, r8
 4be:	89 2e       	mov	r8, r25
 4c0:	98 2f       	mov	r25, r24
 4c2:	87 2f       	mov	r24, r23
 4c4:	76 2f       	mov	r23, r22
 4c6:	65 2f       	mov	r22, r21
 4c8:	54 2f       	mov	r21, r20
 4ca:	43 2f       	mov	r20, r19
 4cc:	32 2f       	mov	r19, r18
 4ce:	22 27       	eor	r18, r18
 4d0:	b8 50       	subi	r27, 0x08	; 8
 4d2:	31 f7       	brne	.-52     	; 0x4a0 <__udivmod64+0xe>
 4d4:	bf 91       	pop	r27
 4d6:	27 c0       	rjmp	.+78     	; 0x526 <__udivmod64+0x94>
 4d8:	1b 2e       	mov	r1, r27
 4da:	bf 91       	pop	r27
 4dc:	bb 27       	eor	r27, r27
 4de:	22 0f       	add	r18, r18
 4e0:	33 1f       	adc	r19, r19
 4e2:	44 1f       	adc	r20, r20
 4e4:	55 1f       	adc	r21, r21
 4e6:	66 1f       	adc	r22, r22
 4e8:	77 1f       	adc	r23, r23
 4ea:	88 1f       	adc	r24, r24
 4ec:	99 1f       	adc	r25, r25
 4ee:	88 1c       	adc	r8, r8
 4f0:	99 1c       	adc	r9, r9
 4f2:	ee 1f       	adc	r30, r30
 4f4:	ff 1f       	adc	r31, r31
 4f6:	cc 1f       	adc	r28, r28
 4f8:	dd 1f       	adc	r29, r29
 4fa:	aa 1f       	adc	r26, r26
 4fc:	bb 1f       	adc	r27, r27
 4fe:	8a 14       	cp	r8, r10
 500:	9b 04       	cpc	r9, r11
 502:	ec 05       	cpc	r30, r12
 504:	fd 05       	cpc	r31, r13
 506:	ce 05       	cpc	r28, r14
 508:	df 05       	cpc	r29, r15
 50a:	a0 07       	cpc	r26, r16
 50c:	b1 07       	cpc	r27, r17
 50e:	48 f0       	brcs	.+18     	; 0x522 <__udivmod64+0x90>
 510:	8a 18       	sub	r8, r10
 512:	9b 08       	sbc	r9, r11
 514:	ec 09       	sbc	r30, r12
 516:	fd 09       	sbc	r31, r13
 518:	ce 09       	sbc	r28, r14
 51a:	df 09       	sbc	r29, r15
 51c:	a0 0b       	sbc	r26, r16
 51e:	b1 0b       	sbc	r27, r17
 520:	21 60       	ori	r18, 0x01	; 1
 522:	1a 94       	dec	r1
 524:	e1 f6       	brne	.-72     	; 0x4de <__udivmod64+0x4c>
 526:	2e f4       	brtc	.+10     	; 0x532 <__udivmod64+0xa0>
 528:	94 01       	movw	r18, r8
 52a:	af 01       	movw	r20, r30
 52c:	be 01       	movw	r22, r28
 52e:	cd 01       	movw	r24, r26
 530:	00 0c       	add	r0, r0
 532:	08 95       	ret

00000534 <__negdi2>:
 534:	60 95       	com	r22
 536:	70 95       	com	r23
 538:	80 95       	com	r24
 53a:	90 95       	com	r25
 53c:	30 95       	com	r19
 53e:	40 95       	com	r20
 540:	50 95       	com	r21
 542:	21 95       	neg	r18
 544:	3f 4f       	sbci	r19, 0xFF	; 255
 546:	4f 4f       	sbci	r20, 0xFF	; 255
 548:	5f 4f       	sbci	r21, 0xFF	; 255
 54a:	6f 4f       	sbci	r22, 0xFF	; 255
 54c:	7f 4f       	sbci	r23, 0xFF	; 255
 54e:	8f 4f       	sbci	r24, 0xFF	; 255
 550:	9f 4f       	sbci	r25, 0xFF	; 255
 552:	08 95       	ret

00000554 <__prologue_saves__>:
 554:	2f 92       	push	r2
 556:	3f 92       	push	r3
 558:	4f 92       	push	r4
 55a:	5f 92       	push	r5
 55c:	6f 92       	push	r6
 55e:	7f 92       	push	r7
 560:	8f 92       	push	r8
 562:	9f 92       	push	r9
 564:	af 92       	push	r10
 566:	bf 92       	push	r11
 568:	cf 92       	push	r12
 56a:	df 92       	push	r13
 56c:	ef 92       	push	r14
 56e:	ff 92       	push	r15
 570:	0f 93       	push	r16
 572:	1f 93       	push	r17
 574:	cf 93       	push	r28
 576:	df 93       	push	r29
 578:	cd b7       	in	r28, 0x3d	; 61
 57a:	de b7       	in	r29, 0x3e	; 62
 57c:	ca 1b       	sub	r28, r26
 57e:	db 0b       	sbc	r29, r27
 580:	0f b6       	in	r0, 0x3f	; 63
 582:	f8 94       	cli
 584:	de bf       	out	0x3e, r29	; 62
 586:	0f be       	out	0x3f, r0	; 63
 588:	cd bf       	out	0x3d, r28	; 61
 58a:	09 94       	ijmp

0000058c <__epilogue_restores__>:
 58c:	2a 88       	ldd	r2, Y+18	; 0x12
 58e:	39 88       	ldd	r3, Y+17	; 0x11
 590:	48 88       	ldd	r4, Y+16	; 0x10
 592:	5f 84       	ldd	r5, Y+15	; 0x0f
 594:	6e 84       	ldd	r6, Y+14	; 0x0e
 596:	7d 84       	ldd	r7, Y+13	; 0x0d
 598:	8c 84       	ldd	r8, Y+12	; 0x0c
 59a:	9b 84       	ldd	r9, Y+11	; 0x0b
 59c:	aa 84       	ldd	r10, Y+10	; 0x0a
 59e:	b9 84       	ldd	r11, Y+9	; 0x09
 5a0:	c8 84       	ldd	r12, Y+8	; 0x08
 5a2:	df 80       	ldd	r13, Y+7	; 0x07
 5a4:	ee 80       	ldd	r14, Y+6	; 0x06
 5a6:	fd 80       	ldd	r15, Y+5	; 0x05
 5a8:	0c 81       	ldd	r16, Y+4	; 0x04
 5aa:	1b 81       	ldd	r17, Y+3	; 0x03
 5ac:	aa 81       	ldd	r26, Y+2	; 0x02
 5ae:	b9 81       	ldd	r27, Y+1	; 0x01
 5b0:	ce 0f       	add	r28, r30
 5b2:	d1 1d       	adc	r29, r1
 5b4:	0f b6       	in	r0, 0x3f	; 63
 5b6:	f8 94       	cli
 5b8:	de bf       	out	0x3e, r29	; 62
 5ba:	0f be       	out	0x3f, r0	; 63
 5bc:	cd bf       	out	0x3d, r28	; 61
 5be:	ed 01       	movw	r28, r26
 5c0:	08 95       	ret

000005c2 <__adddi3_s8>:
 5c2:	00 24       	eor	r0, r0
 5c4:	a7 fd       	sbrc	r26, 7
 5c6:	00 94       	com	r0
 5c8:	2a 0f       	add	r18, r26
 5ca:	30 1d       	adc	r19, r0
 5cc:	40 1d       	adc	r20, r0
 5ce:	50 1d       	adc	r21, r0
 5d0:	60 1d       	adc	r22, r0
 5d2:	70 1d       	adc	r23, r0
 5d4:	80 1d       	adc	r24, r0
 5d6:	90 1d       	adc	r25, r0
 5d8:	08 95       	ret

000005da <__cmpdi2_s8>:
 5da:	00 24       	eor	r0, r0
 5dc:	a7 fd       	sbrc	r26, 7
 5de:	00 94       	com	r0
 5e0:	2a 17       	cp	r18, r26
 5e2:	30 05       	cpc	r19, r0
 5e4:	40 05       	cpc	r20, r0
 5e6:	50 05       	cpc	r21, r0
 5e8:	60 05       	cpc	r22, r0
 5ea:	70 05       	cpc	r23, r0
 5ec:	80 05       	cpc	r24, r0
 5ee:	90 05       	cpc	r25, r0
 5f0:	08 95       	ret

000005f2 <__itoa_ncheck>:
 5f2:	bb 27       	eor	r27, r27
 5f4:	4a 30       	cpi	r20, 0x0A	; 10
 5f6:	31 f4       	brne	.+12     	; 0x604 <__itoa_ncheck+0x12>
 5f8:	99 23       	and	r25, r25
 5fa:	22 f4       	brpl	.+8      	; 0x604 <__itoa_ncheck+0x12>
 5fc:	bd e2       	ldi	r27, 0x2D	; 45
 5fe:	90 95       	com	r25
 600:	81 95       	neg	r24
 602:	9f 4f       	sbci	r25, 0xFF	; 255
 604:	0c 94 05 03 	jmp	0x60a	; 0x60a <__utoa_common>

00000608 <__utoa_ncheck>:
 608:	bb 27       	eor	r27, r27

0000060a <__utoa_common>:
 60a:	fb 01       	movw	r30, r22
 60c:	55 27       	eor	r21, r21
 60e:	aa 27       	eor	r26, r26
 610:	88 0f       	add	r24, r24
 612:	99 1f       	adc	r25, r25
 614:	aa 1f       	adc	r26, r26
 616:	a4 17       	cp	r26, r20
 618:	10 f0       	brcs	.+4      	; 0x61e <__utoa_common+0x14>
 61a:	a4 1b       	sub	r26, r20
 61c:	83 95       	inc	r24
 61e:	50 51       	subi	r21, 0x10	; 16
 620:	b9 f7       	brne	.-18     	; 0x610 <__utoa_common+0x6>
 622:	a0 5d       	subi	r26, 0xD0	; 208
 624:	aa 33       	cpi	r26, 0x3A	; 58
 626:	08 f0       	brcs	.+2      	; 0x62a <__utoa_common+0x20>
 628:	a9 5d       	subi	r26, 0xD9	; 217
 62a:	a1 93       	st	Z+, r26
 62c:	00 97       	sbiw	r24, 0x00	; 0
 62e:	79 f7       	brne	.-34     	; 0x60e <__utoa_common+0x4>
 630:	b1 11       	cpse	r27, r1
 632:	b1 93       	st	Z+, r27
 634:	11 92       	st	Z+, r1
 636:	cb 01       	movw	r24, r22
 638:	0c 94 1e 03 	jmp	0x63c	; 0x63c <strrev>

0000063c <strrev>:
 63c:	dc 01       	movw	r26, r24
 63e:	fc 01       	movw	r30, r24
 640:	67 2f       	mov	r22, r23
 642:	71 91       	ld	r23, Z+
 644:	77 23       	and	r23, r23
 646:	e1 f7       	brne	.-8      	; 0x640 <strrev+0x4>
 648:	32 97       	sbiw	r30, 0x02	; 2
 64a:	04 c0       	rjmp	.+8      	; 0x654 <strrev+0x18>
 64c:	7c 91       	ld	r23, X
 64e:	6d 93       	st	X+, r22
 650:	70 83       	st	Z, r23
 652:	62 91       	ld	r22, -Z
 654:	ae 17       	cp	r26, r30
 656:	bf 07       	cpc	r27, r31
 658:	c8 f3       	brcs	.-14     	; 0x64c <strrev+0x10>
 65a:	08 95       	ret

0000065c <_exit>:
 65c:	f8 94       	cli

0000065e <__stop_program>:
 65e:	ff cf       	rjmp	.-2      	; 0x65e <__stop_program>
