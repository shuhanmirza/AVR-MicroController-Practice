
lcd_stopwatch_me.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000066c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002c  00800060  0000066c  000006e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000070c  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 000000a8  00000000  00000000  0000073c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000b26  00000000  00000000  000007e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000431  00000000  00000000  0000130a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000422  00000000  00000000  0000173b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000168  00000000  00000000  00001b60  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000002ae  00000000  00000000  00001cc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000746  00000000  00000000  00001f76  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000000a0  00000000  00000000  000026bc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e6       	ldi	r30, 0x6C	; 108
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 38       	cpi	r26, 0x8C	; 140
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 18 01 	call	0x230	; 0x230 <main>
  7a:	0c 94 34 03 	jmp	0x668	; 0x668 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <toggle_e>:

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
  82:	96 9a       	sbi	0x12, 6	; 18
    lcd_e_delay();
  84:	00 c0       	rjmp	.+0      	; 0x86 <toggle_e+0x4>
    lcd_e_low();
  86:	96 98       	cbi	0x12, 6	; 18
  88:	08 95       	ret

0000008a <lcd_write>:
                 0: write instruction
Returns:  none
*************************************************************************/
#if LCD_IO_MODE
static void lcd_write(uint8_t data,uint8_t rs) 
{
  8a:	cf 93       	push	r28
  8c:	c8 2f       	mov	r28, r24
    unsigned char dataBits ;


    if (rs) {   /* write data        (RS=1, RW=0) */
  8e:	66 23       	and	r22, r22
  90:	11 f0       	breq	.+4      	; 0x96 <lcd_write+0xc>
       lcd_rs_high();
  92:	94 9a       	sbi	0x12, 4	; 18
  94:	01 c0       	rjmp	.+2      	; 0x98 <lcd_write+0xe>
    } else {    /* write instruction (RS=0, RW=0) */
       lcd_rs_low();
  96:	94 98       	cbi	0x12, 4	; 18
    }
    lcd_rw_low();
  98:	95 98       	cbi	0x12, 5	; 18
        LCD_DATA0_PORT = dataBits | 0x0F;
    }
    else
    {
        /* configure data pins as output */
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
  9a:	a4 9a       	sbi	0x14, 4	; 20
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
  9c:	a5 9a       	sbi	0x14, 5	; 20
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
  9e:	a6 9a       	sbi	0x14, 6	; 20
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
  a0:	a7 9a       	sbi	0x14, 7	; 20
        
        /* output high nibble first */
        LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
  a2:	af 98       	cbi	0x15, 7	; 21
        LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
  a4:	ae 98       	cbi	0x15, 6	; 21
        LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
  a6:	ad 98       	cbi	0x15, 5	; 21
        LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
  a8:	ac 98       	cbi	0x15, 4	; 21
    	if(data & 0x80) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
  aa:	cc 23       	and	r28, r28
  ac:	0c f4       	brge	.+2      	; 0xb0 <lcd_write+0x26>
  ae:	af 9a       	sbi	0x15, 7	; 21
    	if(data & 0x40) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
  b0:	c6 fd       	sbrc	r28, 6
  b2:	ae 9a       	sbi	0x15, 6	; 21
    	if(data & 0x20) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
  b4:	c5 fd       	sbrc	r28, 5
  b6:	ad 9a       	sbi	0x15, 5	; 21
    	if(data & 0x10) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);   
  b8:	c4 fd       	sbrc	r28, 4
  ba:	ac 9a       	sbi	0x15, 4	; 21
        lcd_e_toggle();
  bc:	0e 94 41 00 	call	0x82	; 0x82 <toggle_e>
        
        /* output low nibble */
        LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
  c0:	af 98       	cbi	0x15, 7	; 21
        LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
  c2:	ae 98       	cbi	0x15, 6	; 21
        LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
  c4:	ad 98       	cbi	0x15, 5	; 21
        LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
  c6:	ac 98       	cbi	0x15, 4	; 21
    	if(data & 0x08) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
  c8:	c3 fd       	sbrc	r28, 3
  ca:	af 9a       	sbi	0x15, 7	; 21
    	if(data & 0x04) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
  cc:	c2 fd       	sbrc	r28, 2
  ce:	ae 9a       	sbi	0x15, 6	; 21
    	if(data & 0x02) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
  d0:	c1 fd       	sbrc	r28, 1
  d2:	ad 9a       	sbi	0x15, 5	; 21
    	if(data & 0x01) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
  d4:	c0 fd       	sbrc	r28, 0
  d6:	ac 9a       	sbi	0x15, 4	; 21
        lcd_e_toggle();        
  d8:	0e 94 41 00 	call	0x82	; 0x82 <toggle_e>
        
        /* all data pins high (inactive) */
        LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
  dc:	ac 9a       	sbi	0x15, 4	; 21
        LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
  de:	ad 9a       	sbi	0x15, 5	; 21
        LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
  e0:	ae 9a       	sbi	0x15, 6	; 21
        LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
  e2:	af 9a       	sbi	0x15, 7	; 21
    }
}
  e4:	cf 91       	pop	r28
  e6:	08 95       	ret

000000e8 <lcd_read>:
static uint8_t lcd_read(uint8_t rs) 
{
    uint8_t data;
    
    
    if (rs)
  e8:	88 23       	and	r24, r24
  ea:	11 f0       	breq	.+4      	; 0xf0 <lcd_read+0x8>
        lcd_rs_high();                       /* RS=1: read data      */
  ec:	94 9a       	sbi	0x12, 4	; 18
  ee:	01 c0       	rjmp	.+2      	; 0xf2 <lcd_read+0xa>
    else
        lcd_rs_low();                        /* RS=0: read busy flag */
  f0:	94 98       	cbi	0x12, 4	; 18
    lcd_rw_high();                           /* RW=1  read mode      */
  f2:	95 9a       	sbi	0x12, 5	; 18
        lcd_e_low();
    }
    else
    {
        /* configure data pins as input */
        DDR(LCD_DATA0_PORT) &= ~_BV(LCD_DATA0_PIN);
  f4:	a4 98       	cbi	0x14, 4	; 20
        DDR(LCD_DATA1_PORT) &= ~_BV(LCD_DATA1_PIN);
  f6:	a5 98       	cbi	0x14, 5	; 20
        DDR(LCD_DATA2_PORT) &= ~_BV(LCD_DATA2_PIN);
  f8:	a6 98       	cbi	0x14, 6	; 20
        DDR(LCD_DATA3_PORT) &= ~_BV(LCD_DATA3_PIN);
  fa:	a7 98       	cbi	0x14, 7	; 20
                
        /* read high nibble first */
        lcd_e_high();
  fc:	96 9a       	sbi	0x12, 6	; 18
        lcd_e_delay();        
  fe:	00 c0       	rjmp	.+0      	; 0x100 <lcd_read+0x18>
        data = 0;
        if ( PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x10;
 100:	9c 99       	sbic	0x13, 4	; 19
 102:	02 c0       	rjmp	.+4      	; 0x108 <lcd_read+0x20>
        DDR(LCD_DATA3_PORT) &= ~_BV(LCD_DATA3_PIN);
                
        /* read high nibble first */
        lcd_e_high();
        lcd_e_delay();        
        data = 0;
 104:	80 e0       	ldi	r24, 0x00	; 0
 106:	01 c0       	rjmp	.+2      	; 0x10a <lcd_read+0x22>
        if ( PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x10;
 108:	80 e1       	ldi	r24, 0x10	; 16
        if ( PIN(LCD_DATA1_PORT) & _BV(LCD_DATA1_PIN) ) data |= 0x20;
 10a:	9d 99       	sbic	0x13, 5	; 19
 10c:	80 62       	ori	r24, 0x20	; 32
        if ( PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x40;
 10e:	9e 99       	sbic	0x13, 6	; 19
 110:	80 64       	ori	r24, 0x40	; 64
        if ( PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x80;
 112:	9f 99       	sbic	0x13, 7	; 19
 114:	80 68       	ori	r24, 0x80	; 128
        lcd_e_low();
 116:	96 98       	cbi	0x12, 6	; 18

        lcd_e_delay();                       /* Enable 500ns low       */
 118:	00 c0       	rjmp	.+0      	; 0x11a <lcd_read+0x32>
    
        /* read low nibble */    
        lcd_e_high();
 11a:	96 9a       	sbi	0x12, 6	; 18
        lcd_e_delay();
 11c:	00 c0       	rjmp	.+0      	; 0x11e <lcd_read+0x36>
        if ( PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x01;
 11e:	9c 99       	sbic	0x13, 4	; 19
 120:	81 60       	ori	r24, 0x01	; 1
        if ( PIN(LCD_DATA1_PORT) & _BV(LCD_DATA1_PIN) ) data |= 0x02;
 122:	9d 99       	sbic	0x13, 5	; 19
 124:	82 60       	ori	r24, 0x02	; 2
        if ( PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x04;
 126:	9e 99       	sbic	0x13, 6	; 19
 128:	84 60       	ori	r24, 0x04	; 4
        if ( PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x08;        
 12a:	9f 99       	sbic	0x13, 7	; 19
 12c:	88 60       	ori	r24, 0x08	; 8
        lcd_e_low();
 12e:	96 98       	cbi	0x12, 6	; 18
    }
    return data;
}
 130:	08 95       	ret

00000132 <lcd_waitbusy>:

{
    register uint8_t c;
    
    /* wait until busy flag is cleared */
    while ( (c=lcd_read(0)) & (1<<LCD_BUSY)) {}
 132:	80 e0       	ldi	r24, 0x00	; 0
 134:	0e 94 74 00 	call	0xe8	; 0xe8 <lcd_read>
 138:	88 23       	and	r24, r24
 13a:	dc f3       	brlt	.-10     	; 0x132 <lcd_waitbusy>
 delay loop for small accurate delays: 16-bit counter, 4 cycles/loop
*************************************************************************/
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
 13c:	00 c0       	rjmp	.+0      	; 0x13e <lcd_waitbusy+0xc>
    
    /* the address counter is updated 4us after the busy flag is cleared */
    delay(2);

    /* now read the address counter */
    return (lcd_read(0));  // return address counter
 13e:	80 e0       	ldi	r24, 0x00	; 0
 140:	0e 94 74 00 	call	0xe8	; 0xe8 <lcd_read>
    
}/* lcd_waitbusy */
 144:	08 95       	ret

00000146 <lcd_command>:
Send LCD controller instruction command
Input:   instruction to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_command(uint8_t cmd)
{
 146:	cf 93       	push	r28
 148:	c8 2f       	mov	r28, r24
    lcd_waitbusy();
 14a:	0e 94 99 00 	call	0x132	; 0x132 <lcd_waitbusy>
    lcd_write(cmd,0);
 14e:	60 e0       	ldi	r22, 0x00	; 0
 150:	8c 2f       	mov	r24, r28
 152:	0e 94 45 00 	call	0x8a	; 0x8a <lcd_write>
}
 156:	cf 91       	pop	r28
 158:	08 95       	ret

0000015a <lcd_gotoxy>:
{
#if LCD_LINES==1
    lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
#endif
#if LCD_LINES==2
    if ( y==0 ) 
 15a:	61 11       	cpse	r22, r1
 15c:	04 c0       	rjmp	.+8      	; 0x166 <lcd_gotoxy+0xc>
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
 15e:	80 58       	subi	r24, 0x80	; 128
 160:	0e 94 a3 00 	call	0x146	; 0x146 <lcd_command>
 164:	08 95       	ret
    else
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE2+x);
 166:	80 54       	subi	r24, 0x40	; 64
 168:	0e 94 a3 00 	call	0x146	; 0x146 <lcd_command>
 16c:	08 95       	ret

0000016e <lcd_clrscr>:
/*************************************************************************
Clear display and set cursor to home position
*************************************************************************/
void lcd_clrscr(void)
{
    lcd_command(1<<LCD_CLR);
 16e:	81 e0       	ldi	r24, 0x01	; 1
 170:	0e 94 a3 00 	call	0x146	; 0x146 <lcd_command>
 174:	08 95       	ret

00000176 <lcd_putc>:
Display character at current cursor position 
Input:    character to be displayed                                       
Returns:  none
*************************************************************************/
void lcd_putc(char c)
{
 176:	cf 93       	push	r28
 178:	c8 2f       	mov	r28, r24
    uint8_t pos;


    pos = lcd_waitbusy();   // read busy-flag and address counter
 17a:	0e 94 99 00 	call	0x132	; 0x132 <lcd_waitbusy>
    if (c=='\n')
 17e:	ca 30       	cpi	r28, 0x0A	; 10
 180:	49 f4       	brne	.+18     	; 0x194 <lcd_putc+0x1e>

#if LCD_LINES==1
    addressCounter = 0;
#endif
#if LCD_LINES==2
    if ( pos < (LCD_START_LINE2) )
 182:	80 34       	cpi	r24, 0x40	; 64
 184:	10 f4       	brcc	.+4      	; 0x18a <lcd_putc+0x14>
        addressCounter = LCD_START_LINE2;
 186:	80 e4       	ldi	r24, 0x40	; 64
 188:	01 c0       	rjmp	.+2      	; 0x18c <lcd_putc+0x16>
    else
        addressCounter = LCD_START_LINE1;
 18a:	80 e0       	ldi	r24, 0x00	; 0
        addressCounter = LCD_START_LINE4;
    else 
        addressCounter = LCD_START_LINE1;
#endif
#endif
    lcd_command((1<<LCD_DDRAM)+addressCounter);
 18c:	80 58       	subi	r24, 0x80	; 128
 18e:	0e 94 a3 00 	call	0x146	; 0x146 <lcd_command>
 192:	04 c0       	rjmp	.+8      	; 0x19c <lcd_putc+0x26>
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1,0);
        }
#endif
        lcd_waitbusy();
#endif
        lcd_write(c, 1);
 194:	61 e0       	ldi	r22, 0x01	; 1
 196:	8c 2f       	mov	r24, r28
 198:	0e 94 45 00 	call	0x8a	; 0x8a <lcd_write>
    }

}/* lcd_putc */
 19c:	cf 91       	pop	r28
 19e:	08 95       	ret

000001a0 <lcd_puts>:
Input:    string to be displayed
Returns:  none
*************************************************************************/
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
 1a0:	cf 93       	push	r28
 1a2:	df 93       	push	r29
    register char c;

    while ( (c = *s++) ) {
 1a4:	ec 01       	movw	r28, r24
 1a6:	21 96       	adiw	r28, 0x01	; 1
 1a8:	fc 01       	movw	r30, r24
 1aa:	80 81       	ld	r24, Z
 1ac:	88 23       	and	r24, r24
 1ae:	29 f0       	breq	.+10     	; 0x1ba <lcd_puts+0x1a>
        lcd_putc(c);
 1b0:	0e 94 bb 00 	call	0x176	; 0x176 <lcd_putc>
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = *s++) ) {
 1b4:	89 91       	ld	r24, Y+
 1b6:	81 11       	cpse	r24, r1
 1b8:	fb cf       	rjmp	.-10     	; 0x1b0 <lcd_puts+0x10>
        lcd_putc(c);
    }

}/* lcd_puts */
 1ba:	df 91       	pop	r29
 1bc:	cf 91       	pop	r28
 1be:	08 95       	ret

000001c0 <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 1c0:	cf 93       	push	r28
 1c2:	c8 2f       	mov	r28, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 1c4:	8c 9a       	sbi	0x11, 4	; 17
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 1c6:	8d 9a       	sbi	0x11, 5	; 17
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 1c8:	8e 9a       	sbi	0x11, 6	; 17
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 1ca:	a4 9a       	sbi	0x14, 4	; 20
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 1cc:	a5 9a       	sbi	0x14, 5	; 20
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 1ce:	a6 9a       	sbi	0x14, 6	; 20
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 1d0:	a7 9a       	sbi	0x14, 7	; 20
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 1d2:	e0 ea       	ldi	r30, 0xA0	; 160
 1d4:	ff e0       	ldi	r31, 0x0F	; 15
 1d6:	31 97       	sbiw	r30, 0x01	; 1
 1d8:	f1 f7       	brne	.-4      	; 0x1d6 <lcd_init+0x16>
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
    }
    delay(16000);        /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);  // _BV(LCD_FUNCTION)>>4;
 1da:	ad 9a       	sbi	0x15, 5	; 21
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
 1dc:	ac 9a       	sbi	0x15, 4	; 21
    lcd_e_toggle();
 1de:	0e 94 41 00 	call	0x82	; 0x82 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 1e2:	e0 ee       	ldi	r30, 0xE0	; 224
 1e4:	f4 e0       	ldi	r31, 0x04	; 4
 1e6:	31 97       	sbiw	r30, 0x01	; 1
 1e8:	f1 f7       	brne	.-4      	; 0x1e6 <lcd_init+0x26>
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
    lcd_e_toggle();
    delay(4992);         /* delay, busy flag can't be checked here */
   
    /* repeat last command */ 
    lcd_e_toggle();      
 1ea:	0e 94 41 00 	call	0x82	; 0x82 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 1ee:	e0 e1       	ldi	r30, 0x10	; 16
 1f0:	f0 e0       	ldi	r31, 0x00	; 0
 1f2:	31 97       	sbiw	r30, 0x01	; 1
 1f4:	f1 f7       	brne	.-4      	; 0x1f2 <lcd_init+0x32>
    /* repeat last command */ 
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */
    
    /* repeat last command a third time */
    lcd_e_toggle();      
 1f6:	0e 94 41 00 	call	0x82	; 0x82 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 1fa:	e0 e1       	ldi	r30, 0x10	; 16
 1fc:	f0 e0       	ldi	r31, 0x00	; 0
 1fe:	31 97       	sbiw	r30, 0x01	; 1
 200:	f1 f7       	brne	.-4      	; 0x1fe <lcd_init+0x3e>
    /* repeat last command a third time */
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
 202:	ac 98       	cbi	0x15, 4	; 21
    lcd_e_toggle();
 204:	0e 94 41 00 	call	0x82	; 0x82 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 208:	e0 e1       	ldi	r30, 0x10	; 16
 20a:	f0 e0       	ldi	r31, 0x00	; 0
 20c:	31 97       	sbiw	r30, 0x01	; 1
 20e:	f1 f7       	brne	.-4      	; 0x20c <lcd_init+0x4c>
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
 210:	88 e2       	ldi	r24, 0x28	; 40
 212:	0e 94 a3 00 	call	0x146	; 0x146 <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
 216:	88 e0       	ldi	r24, 0x08	; 8
 218:	0e 94 a3 00 	call	0x146	; 0x146 <lcd_command>
    lcd_clrscr();                           /* display clear                */ 
 21c:	0e 94 b7 00 	call	0x16e	; 0x16e <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
 220:	86 e0       	ldi	r24, 0x06	; 6
 222:	0e 94 a3 00 	call	0x146	; 0x146 <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
 226:	8c 2f       	mov	r24, r28
 228:	0e 94 a3 00 	call	0x146	; 0x146 <lcd_command>

}/* lcd_init */
 22c:	cf 91       	pop	r28
 22e:	08 95       	ret

00000230 <main>:
#include <string.h>
#include <stdlib.h>


int main(void)
{
 230:	cf 93       	push	r28
 232:	df 93       	push	r29
 234:	cd b7       	in	r28, 0x3d	; 61
 236:	de b7       	in	r29, 0x3e	; 62
 238:	2b 97       	sbiw	r28, 0x0b	; 11
 23a:	0f b6       	in	r0, 0x3f	; 63
 23c:	f8 94       	cli
 23e:	de bf       	out	0x3e, r29	; 62
 240:	0f be       	out	0x3f, r0	; 63
 242:	cd bf       	out	0x3d, r28	; 61
	MCUCSR |= 1<<JTD;
 244:	84 b7       	in	r24, 0x34	; 52
 246:	80 68       	ori	r24, 0x80	; 128
 248:	84 bf       	out	0x34, r24	; 52
	MCUCSR |= 1<<JTD;
 24a:	84 b7       	in	r24, 0x34	; 52
 24c:	80 68       	ori	r24, 0x80	; 128
 24e:	84 bf       	out	0x34, r24	; 52
	
	long long i,h,m,s,j;
	char ch[3];
	
	DDRD &=~ (1<<PD2);
 250:	8a 98       	cbi	0x11, 2	; 17
	
	lcd_init (LCD_DISP_ON);
 252:	8c e0       	ldi	r24, 0x0C	; 12
 254:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <lcd_init>

	
    while(1)
    {
		lcd_gotoxy(0,0);
 258:	60 e0       	ldi	r22, 0x00	; 0
 25a:	80 e0       	ldi	r24, 0x00	; 0
 25c:	0e 94 ad 00 	call	0x15a	; 0x15a <lcd_gotoxy>
       lcd_puts("Press the button");
 260:	80 e6       	ldi	r24, 0x60	; 96
 262:	90 e0       	ldi	r25, 0x00	; 0
 264:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_puts>
	   lcd_gotoxy(0,1);
 268:	61 e0       	ldi	r22, 0x01	; 1
 26a:	80 e0       	ldi	r24, 0x00	; 0
 26c:	0e 94 ad 00 	call	0x15a	; 0x15a <lcd_gotoxy>
	   lcd_puts("to start");
 270:	81 e7       	ldi	r24, 0x71	; 113
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_puts>
	   
	   
	 if (!(PIND & (1<<PD2)))
 278:	82 99       	sbic	0x10, 2	; 16
 27a:	ee cf       	rjmp	.-36     	; 0x258 <main+0x28>
 27c:	d0 c0       	rjmp	.+416    	; 0x41e <main+0x1ee>
	  {
	   
	   
			for(i=0 ; i<=99999999999 ;i++)
			{
				lcd_clrscr();
 27e:	0e 94 b7 00 	call	0x16e	; 0x16e <lcd_clrscr>
				
				
				
				//hour
				j=i;
              	h=(j/3600);
 282:	68 94       	set
 284:	aa 24       	eor	r10, r10
 286:	a4 f8       	bld	r10, 4
 288:	0f 2e       	mov	r0, r31
 28a:	fe e0       	ldi	r31, 0x0E	; 14
 28c:	bf 2e       	mov	r11, r31
 28e:	f0 2d       	mov	r31, r0
 290:	c1 2c       	mov	r12, r1
 292:	d1 2c       	mov	r13, r1
 294:	e1 2c       	mov	r14, r1
 296:	f1 2c       	mov	r15, r1
 298:	00 e0       	ldi	r16, 0x00	; 0
 29a:	10 e0       	ldi	r17, 0x00	; 0
 29c:	2c 81       	ldd	r18, Y+4	; 0x04
 29e:	3d 81       	ldd	r19, Y+5	; 0x05
 2a0:	4e 81       	ldd	r20, Y+6	; 0x06
 2a2:	5f 81       	ldd	r21, Y+7	; 0x07
 2a4:	68 85       	ldd	r22, Y+8	; 0x08
 2a6:	79 85       	ldd	r23, Y+9	; 0x09
 2a8:	8a 85       	ldd	r24, Y+10	; 0x0a
 2aa:	9b 85       	ldd	r25, Y+11	; 0x0b
 2ac:	0e 94 1e 02 	call	0x43c	; 0x43c <__divdi3>
 2b0:	f2 2f       	mov	r31, r18
 2b2:	e3 2f       	mov	r30, r19
				  
				  if(h==1000)
 2b4:	28 3e       	cpi	r18, 0xE8	; 232
 2b6:	33 40       	sbci	r19, 0x03	; 3
 2b8:	41 05       	cpc	r20, r1
 2ba:	51 05       	cpc	r21, r1
 2bc:	61 05       	cpc	r22, r1
 2be:	71 05       	cpc	r23, r1
 2c0:	81 05       	cpc	r24, r1
 2c2:	91 05       	cpc	r25, r1
 2c4:	71 f4       	brne	.+28     	; 0x2e2 <main+0xb2>
				  {
					  lcd_puts("overflow");
 2c6:	8a e7       	ldi	r24, 0x7A	; 122
 2c8:	90 e0       	ldi	r25, 0x00	; 0
 2ca:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_puts>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2ce:	ef e7       	ldi	r30, 0x7F	; 127
 2d0:	24 e8       	ldi	r18, 0x84	; 132
 2d2:	8e e1       	ldi	r24, 0x1E	; 30
 2d4:	e1 50       	subi	r30, 0x01	; 1
 2d6:	20 40       	sbci	r18, 0x00	; 0
 2d8:	80 40       	sbci	r24, 0x00	; 0
 2da:	e1 f7       	brne	.-8      	; 0x2d4 <main+0xa4>
 2dc:	00 c0       	rjmp	.+0      	; 0x2de <main+0xae>
 2de:	00 00       	nop
 2e0:	bb cf       	rjmp	.-138    	; 0x258 <main+0x28>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 2e2:	4a e0       	ldi	r20, 0x0A	; 10
 2e4:	be 01       	movw	r22, r28
 2e6:	6f 5f       	subi	r22, 0xFF	; 255
 2e8:	7f 4f       	sbci	r23, 0xFF	; 255
 2ea:	8f 2f       	mov	r24, r31
 2ec:	9e 2f       	mov	r25, r30
 2ee:	0e 94 ff 02 	call	0x5fe	; 0x5fe <__itoa_ncheck>
					  _delay_ms(10000);
					  break;
				  }
				  
				  	itoa(h,ch,10);
					  lcd_gotoxy(0,0);
 2f2:	60 e0       	ldi	r22, 0x00	; 0
 2f4:	80 e0       	ldi	r24, 0x00	; 0
 2f6:	0e 94 ad 00 	call	0x15a	; 0x15a <lcd_gotoxy>
					  lcd_puts(ch);
 2fa:	ce 01       	movw	r24, r28
 2fc:	01 96       	adiw	r24, 0x01	; 1
 2fe:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_puts>
					  lcd_gotoxy(3,0);
 302:	60 e0       	ldi	r22, 0x00	; 0
 304:	83 e0       	ldi	r24, 0x03	; 3
 306:	0e 94 ad 00 	call	0x15a	; 0x15a <lcd_gotoxy>
					  lcd_putc('H');
 30a:	88 e4       	ldi	r24, 0x48	; 72
 30c:	0e 94 bb 00 	call	0x176	; 0x176 <lcd_putc>
					  
					  
					  
					//minute
					
					  j=i%3600;
 310:	68 94       	set
 312:	aa 24       	eor	r10, r10
 314:	a4 f8       	bld	r10, 4
 316:	0f 2e       	mov	r0, r31
 318:	fe e0       	ldi	r31, 0x0E	; 14
 31a:	bf 2e       	mov	r11, r31
 31c:	f0 2d       	mov	r31, r0
 31e:	c1 2c       	mov	r12, r1
 320:	d1 2c       	mov	r13, r1
 322:	e1 2c       	mov	r14, r1
 324:	f1 2c       	mov	r15, r1
 326:	00 e0       	ldi	r16, 0x00	; 0
 328:	10 e0       	ldi	r17, 0x00	; 0
 32a:	22 2d       	mov	r18, r2
 32c:	33 2d       	mov	r19, r3
 32e:	44 2d       	mov	r20, r4
 330:	55 2d       	mov	r21, r5
 332:	66 2d       	mov	r22, r6
 334:	77 2d       	mov	r23, r7
 336:	88 2d       	mov	r24, r8
 338:	99 2d       	mov	r25, r9
 33a:	0e 94 1c 02 	call	0x438	; 0x438 <__moddi3>
					  
					  m=j/60;
 33e:	0f 2e       	mov	r0, r31
 340:	fc e3       	ldi	r31, 0x3C	; 60
 342:	af 2e       	mov	r10, r31
 344:	f0 2d       	mov	r31, r0
 346:	b1 2c       	mov	r11, r1
 348:	0e 94 1e 02 	call	0x43c	; 0x43c <__divdi3>
 34c:	4a e0       	ldi	r20, 0x0A	; 10
 34e:	be 01       	movw	r22, r28
 350:	6f 5f       	subi	r22, 0xFF	; 255
 352:	7f 4f       	sbci	r23, 0xFF	; 255
 354:	82 2f       	mov	r24, r18
 356:	93 2f       	mov	r25, r19
 358:	0e 94 ff 02 	call	0x5fe	; 0x5fe <__itoa_ncheck>
					  
					  itoa(m,ch,10);
					  lcd_gotoxy(5,0);
 35c:	60 e0       	ldi	r22, 0x00	; 0
 35e:	85 e0       	ldi	r24, 0x05	; 5
 360:	0e 94 ad 00 	call	0x15a	; 0x15a <lcd_gotoxy>
					  lcd_puts(ch);
 364:	ce 01       	movw	r24, r28
 366:	01 96       	adiw	r24, 0x01	; 1
 368:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_puts>
					  lcd_gotoxy(7,0);
 36c:	60 e0       	ldi	r22, 0x00	; 0
 36e:	87 e0       	ldi	r24, 0x07	; 7
 370:	0e 94 ad 00 	call	0x15a	; 0x15a <lcd_gotoxy>
					  lcd_puts("MIN");
 374:	83 e8       	ldi	r24, 0x83	; 131
 376:	90 e0       	ldi	r25, 0x00	; 0
 378:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_puts>
					  
					  //second
					  
					  j=i%60;
 37c:	22 2d       	mov	r18, r2
 37e:	33 2d       	mov	r19, r3
 380:	44 2d       	mov	r20, r4
 382:	55 2d       	mov	r21, r5
 384:	66 2d       	mov	r22, r6
 386:	77 2d       	mov	r23, r7
 388:	88 2d       	mov	r24, r8
 38a:	99 2d       	mov	r25, r9
 38c:	0e 94 1c 02 	call	0x438	; 0x438 <__moddi3>
 390:	4a e0       	ldi	r20, 0x0A	; 10
 392:	be 01       	movw	r22, r28
 394:	6f 5f       	subi	r22, 0xFF	; 255
 396:	7f 4f       	sbci	r23, 0xFF	; 255
 398:	82 2f       	mov	r24, r18
 39a:	93 2f       	mov	r25, r19
 39c:	0e 94 ff 02 	call	0x5fe	; 0x5fe <__itoa_ncheck>
					  
					  s=j;
					  
					  itoa(s,ch,10);
					  lcd_gotoxy(11,0);
 3a0:	60 e0       	ldi	r22, 0x00	; 0
 3a2:	8b e0       	ldi	r24, 0x0B	; 11
 3a4:	0e 94 ad 00 	call	0x15a	; 0x15a <lcd_gotoxy>
					  lcd_puts(ch);
 3a8:	ce 01       	movw	r24, r28
 3aa:	01 96       	adiw	r24, 0x01	; 1
 3ac:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_puts>
					  lcd_gotoxy(13,0);
 3b0:	60 e0       	ldi	r22, 0x00	; 0
 3b2:	8d e0       	ldi	r24, 0x0D	; 13
 3b4:	0e 94 ad 00 	call	0x15a	; 0x15a <lcd_gotoxy>
					  lcd_puts("sec");
 3b8:	87 e8       	ldi	r24, 0x87	; 135
 3ba:	90 e0       	ldi	r25, 0x00	; 0
 3bc:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_puts>
 3c0:	9f e3       	ldi	r25, 0x3F	; 63
 3c2:	ad e0       	ldi	r26, 0x0D	; 13
 3c4:	e3 e0       	ldi	r30, 0x03	; 3
 3c6:	91 50       	subi	r25, 0x01	; 1
 3c8:	a0 40       	sbci	r26, 0x00	; 0
 3ca:	e0 40       	sbci	r30, 0x00	; 0
 3cc:	e1 f7       	brne	.-8      	; 0x3c6 <main+0x196>
 3ce:	00 c0       	rjmp	.+0      	; 0x3d0 <main+0x1a0>
 3d0:	00 00       	nop
	   
	 if (!(PIND & (1<<PD2)))
	  {
	   
	   
			for(i=0 ; i<=99999999999 ;i++)
 3d2:	22 2d       	mov	r18, r2
 3d4:	33 2d       	mov	r19, r3
 3d6:	44 2d       	mov	r20, r4
 3d8:	55 2d       	mov	r21, r5
 3da:	66 2d       	mov	r22, r6
 3dc:	77 2d       	mov	r23, r7
 3de:	88 2d       	mov	r24, r8
 3e0:	99 2d       	mov	r25, r9
 3e2:	a1 e0       	ldi	r26, 0x01	; 1
 3e4:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <__adddi3_s8>
 3e8:	2c 83       	std	Y+4, r18	; 0x04
 3ea:	3d 83       	std	Y+5, r19	; 0x05
 3ec:	4e 83       	std	Y+6, r20	; 0x06
 3ee:	5f 83       	std	Y+7, r21	; 0x07
 3f0:	68 87       	std	Y+8, r22	; 0x08
 3f2:	79 87       	std	Y+9, r23	; 0x09
 3f4:	8a 87       	std	Y+10, r24	; 0x0a
 3f6:	9b 87       	std	Y+11, r25	; 0x0b
 3f8:	22 2e       	mov	r2, r18
 3fa:	33 2e       	mov	r3, r19
 3fc:	44 2e       	mov	r4, r20
 3fe:	55 2e       	mov	r5, r21
 400:	66 2e       	mov	r6, r22
 402:	77 2e       	mov	r7, r23
 404:	88 2e       	mov	r8, r24
 406:	99 2e       	mov	r9, r25
 408:	21 15       	cp	r18, r1
 40a:	38 4e       	sbci	r19, 0xE8	; 232
 40c:	46 47       	sbci	r20, 0x76	; 118
 40e:	58 44       	sbci	r21, 0x48	; 72
 410:	67 41       	sbci	r22, 0x17	; 23
 412:	71 05       	cpc	r23, r1
 414:	81 05       	cpc	r24, r1
 416:	91 05       	cpc	r25, r1
 418:	09 f0       	breq	.+2      	; 0x41c <main+0x1ec>
 41a:	31 cf       	rjmp	.-414    	; 0x27e <main+0x4e>
 41c:	1d cf       	rjmp	.-454    	; 0x258 <main+0x28>
			{
				lcd_clrscr();
 41e:	0e 94 b7 00 	call	0x16e	; 0x16e <lcd_clrscr>
 422:	21 2c       	mov	r2, r1
 424:	31 2c       	mov	r3, r1
 426:	41 2c       	mov	r4, r1
 428:	51 2c       	mov	r5, r1
 42a:	61 2c       	mov	r6, r1
 42c:	71 2c       	mov	r7, r1
 42e:	81 2c       	mov	r8, r1
 430:	91 2c       	mov	r9, r1
				
				
				
				//hour
				j=i;
              	h=(j/3600);
 432:	f0 e0       	ldi	r31, 0x00	; 0
 434:	e0 e0       	ldi	r30, 0x00	; 0
 436:	55 cf       	rjmp	.-342    	; 0x2e2 <main+0xb2>

00000438 <__moddi3>:
 438:	68 94       	set
 43a:	01 c0       	rjmp	.+2      	; 0x43e <__divdi3_moddi3>

0000043c <__divdi3>:
 43c:	e8 94       	clt

0000043e <__divdi3_moddi3>:
 43e:	f9 2f       	mov	r31, r25
 440:	f1 2b       	or	r31, r17
 442:	12 f0       	brmi	.+4      	; 0x448 <__divdi3_moddi3+0xa>
 444:	0c 94 50 02 	jmp	0x4a0	; 0x4a0 <__udivdi3_umoddi3>
 448:	a0 e0       	ldi	r26, 0x00	; 0
 44a:	b0 e0       	ldi	r27, 0x00	; 0
 44c:	ea e2       	ldi	r30, 0x2A	; 42
 44e:	f2 e0       	ldi	r31, 0x02	; 2
 450:	0c 94 c2 02 	jmp	0x584	; 0x584 <__prologue_saves__+0xc>
 454:	09 2e       	mov	r0, r25
 456:	05 94       	asr	r0
 458:	22 f4       	brpl	.+8      	; 0x462 <__divdi3_moddi3+0x24>
 45a:	0e 94 ac 02 	call	0x558	; 0x558 <__negdi2>
 45e:	11 23       	and	r17, r17
 460:	92 f4       	brpl	.+36     	; 0x486 <__divdi3_moddi3+0x48>
 462:	f0 e8       	ldi	r31, 0x80	; 128
 464:	0f 26       	eor	r0, r31
 466:	ff ef       	ldi	r31, 0xFF	; 255
 468:	e0 94       	com	r14
 46a:	f0 94       	com	r15
 46c:	00 95       	com	r16
 46e:	10 95       	com	r17
 470:	b0 94       	com	r11
 472:	c0 94       	com	r12
 474:	d0 94       	com	r13
 476:	a1 94       	neg	r10
 478:	bf 0a       	sbc	r11, r31
 47a:	cf 0a       	sbc	r12, r31
 47c:	df 0a       	sbc	r13, r31
 47e:	ef 0a       	sbc	r14, r31
 480:	ff 0a       	sbc	r15, r31
 482:	0f 0b       	sbc	r16, r31
 484:	1f 0b       	sbc	r17, r31
 486:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <__udivmod64>
 48a:	07 fc       	sbrc	r0, 7
 48c:	0e 94 ac 02 	call	0x558	; 0x558 <__negdi2>
 490:	cd b7       	in	r28, 0x3d	; 61
 492:	de b7       	in	r29, 0x3e	; 62
 494:	ec e0       	ldi	r30, 0x0C	; 12
 496:	0c 94 de 02 	jmp	0x5bc	; 0x5bc <__epilogue_restores__+0xc>

0000049a <__umoddi3>:
 49a:	68 94       	set
 49c:	01 c0       	rjmp	.+2      	; 0x4a0 <__udivdi3_umoddi3>

0000049e <__udivdi3>:
 49e:	e8 94       	clt

000004a0 <__udivdi3_umoddi3>:
 4a0:	8f 92       	push	r8
 4a2:	9f 92       	push	r9
 4a4:	cf 93       	push	r28
 4a6:	df 93       	push	r29
 4a8:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <__udivmod64>
 4ac:	df 91       	pop	r29
 4ae:	cf 91       	pop	r28
 4b0:	9f 90       	pop	r9
 4b2:	8f 90       	pop	r8
 4b4:	08 95       	ret

000004b6 <__udivmod64>:
 4b6:	88 24       	eor	r8, r8
 4b8:	99 24       	eor	r9, r9
 4ba:	f4 01       	movw	r30, r8
 4bc:	e4 01       	movw	r28, r8
 4be:	b0 e4       	ldi	r27, 0x40	; 64
 4c0:	9f 93       	push	r25
 4c2:	aa 27       	eor	r26, r26
 4c4:	9a 15       	cp	r25, r10
 4c6:	8b 04       	cpc	r8, r11
 4c8:	9c 04       	cpc	r9, r12
 4ca:	ed 05       	cpc	r30, r13
 4cc:	fe 05       	cpc	r31, r14
 4ce:	cf 05       	cpc	r28, r15
 4d0:	d0 07       	cpc	r29, r16
 4d2:	a1 07       	cpc	r26, r17
 4d4:	98 f4       	brcc	.+38     	; 0x4fc <__udivmod64+0x46>
 4d6:	ad 2f       	mov	r26, r29
 4d8:	dc 2f       	mov	r29, r28
 4da:	cf 2f       	mov	r28, r31
 4dc:	fe 2f       	mov	r31, r30
 4de:	e9 2d       	mov	r30, r9
 4e0:	98 2c       	mov	r9, r8
 4e2:	89 2e       	mov	r8, r25
 4e4:	98 2f       	mov	r25, r24
 4e6:	87 2f       	mov	r24, r23
 4e8:	76 2f       	mov	r23, r22
 4ea:	65 2f       	mov	r22, r21
 4ec:	54 2f       	mov	r21, r20
 4ee:	43 2f       	mov	r20, r19
 4f0:	32 2f       	mov	r19, r18
 4f2:	22 27       	eor	r18, r18
 4f4:	b8 50       	subi	r27, 0x08	; 8
 4f6:	31 f7       	brne	.-52     	; 0x4c4 <__udivmod64+0xe>
 4f8:	bf 91       	pop	r27
 4fa:	27 c0       	rjmp	.+78     	; 0x54a <__udivmod64+0x94>
 4fc:	1b 2e       	mov	r1, r27
 4fe:	bf 91       	pop	r27
 500:	bb 27       	eor	r27, r27
 502:	22 0f       	add	r18, r18
 504:	33 1f       	adc	r19, r19
 506:	44 1f       	adc	r20, r20
 508:	55 1f       	adc	r21, r21
 50a:	66 1f       	adc	r22, r22
 50c:	77 1f       	adc	r23, r23
 50e:	88 1f       	adc	r24, r24
 510:	99 1f       	adc	r25, r25
 512:	88 1c       	adc	r8, r8
 514:	99 1c       	adc	r9, r9
 516:	ee 1f       	adc	r30, r30
 518:	ff 1f       	adc	r31, r31
 51a:	cc 1f       	adc	r28, r28
 51c:	dd 1f       	adc	r29, r29
 51e:	aa 1f       	adc	r26, r26
 520:	bb 1f       	adc	r27, r27
 522:	8a 14       	cp	r8, r10
 524:	9b 04       	cpc	r9, r11
 526:	ec 05       	cpc	r30, r12
 528:	fd 05       	cpc	r31, r13
 52a:	ce 05       	cpc	r28, r14
 52c:	df 05       	cpc	r29, r15
 52e:	a0 07       	cpc	r26, r16
 530:	b1 07       	cpc	r27, r17
 532:	48 f0       	brcs	.+18     	; 0x546 <__udivmod64+0x90>
 534:	8a 18       	sub	r8, r10
 536:	9b 08       	sbc	r9, r11
 538:	ec 09       	sbc	r30, r12
 53a:	fd 09       	sbc	r31, r13
 53c:	ce 09       	sbc	r28, r14
 53e:	df 09       	sbc	r29, r15
 540:	a0 0b       	sbc	r26, r16
 542:	b1 0b       	sbc	r27, r17
 544:	21 60       	ori	r18, 0x01	; 1
 546:	1a 94       	dec	r1
 548:	e1 f6       	brne	.-72     	; 0x502 <__udivmod64+0x4c>
 54a:	2e f4       	brtc	.+10     	; 0x556 <__udivmod64+0xa0>
 54c:	94 01       	movw	r18, r8
 54e:	af 01       	movw	r20, r30
 550:	be 01       	movw	r22, r28
 552:	cd 01       	movw	r24, r26
 554:	00 0c       	add	r0, r0
 556:	08 95       	ret

00000558 <__negdi2>:
 558:	60 95       	com	r22
 55a:	70 95       	com	r23
 55c:	80 95       	com	r24
 55e:	90 95       	com	r25
 560:	30 95       	com	r19
 562:	40 95       	com	r20
 564:	50 95       	com	r21
 566:	21 95       	neg	r18
 568:	3f 4f       	sbci	r19, 0xFF	; 255
 56a:	4f 4f       	sbci	r20, 0xFF	; 255
 56c:	5f 4f       	sbci	r21, 0xFF	; 255
 56e:	6f 4f       	sbci	r22, 0xFF	; 255
 570:	7f 4f       	sbci	r23, 0xFF	; 255
 572:	8f 4f       	sbci	r24, 0xFF	; 255
 574:	9f 4f       	sbci	r25, 0xFF	; 255
 576:	08 95       	ret

00000578 <__prologue_saves__>:
 578:	2f 92       	push	r2
 57a:	3f 92       	push	r3
 57c:	4f 92       	push	r4
 57e:	5f 92       	push	r5
 580:	6f 92       	push	r6
 582:	7f 92       	push	r7
 584:	8f 92       	push	r8
 586:	9f 92       	push	r9
 588:	af 92       	push	r10
 58a:	bf 92       	push	r11
 58c:	cf 92       	push	r12
 58e:	df 92       	push	r13
 590:	ef 92       	push	r14
 592:	ff 92       	push	r15
 594:	0f 93       	push	r16
 596:	1f 93       	push	r17
 598:	cf 93       	push	r28
 59a:	df 93       	push	r29
 59c:	cd b7       	in	r28, 0x3d	; 61
 59e:	de b7       	in	r29, 0x3e	; 62
 5a0:	ca 1b       	sub	r28, r26
 5a2:	db 0b       	sbc	r29, r27
 5a4:	0f b6       	in	r0, 0x3f	; 63
 5a6:	f8 94       	cli
 5a8:	de bf       	out	0x3e, r29	; 62
 5aa:	0f be       	out	0x3f, r0	; 63
 5ac:	cd bf       	out	0x3d, r28	; 61
 5ae:	09 94       	ijmp

000005b0 <__epilogue_restores__>:
 5b0:	2a 88       	ldd	r2, Y+18	; 0x12
 5b2:	39 88       	ldd	r3, Y+17	; 0x11
 5b4:	48 88       	ldd	r4, Y+16	; 0x10
 5b6:	5f 84       	ldd	r5, Y+15	; 0x0f
 5b8:	6e 84       	ldd	r6, Y+14	; 0x0e
 5ba:	7d 84       	ldd	r7, Y+13	; 0x0d
 5bc:	8c 84       	ldd	r8, Y+12	; 0x0c
 5be:	9b 84       	ldd	r9, Y+11	; 0x0b
 5c0:	aa 84       	ldd	r10, Y+10	; 0x0a
 5c2:	b9 84       	ldd	r11, Y+9	; 0x09
 5c4:	c8 84       	ldd	r12, Y+8	; 0x08
 5c6:	df 80       	ldd	r13, Y+7	; 0x07
 5c8:	ee 80       	ldd	r14, Y+6	; 0x06
 5ca:	fd 80       	ldd	r15, Y+5	; 0x05
 5cc:	0c 81       	ldd	r16, Y+4	; 0x04
 5ce:	1b 81       	ldd	r17, Y+3	; 0x03
 5d0:	aa 81       	ldd	r26, Y+2	; 0x02
 5d2:	b9 81       	ldd	r27, Y+1	; 0x01
 5d4:	ce 0f       	add	r28, r30
 5d6:	d1 1d       	adc	r29, r1
 5d8:	0f b6       	in	r0, 0x3f	; 63
 5da:	f8 94       	cli
 5dc:	de bf       	out	0x3e, r29	; 62
 5de:	0f be       	out	0x3f, r0	; 63
 5e0:	cd bf       	out	0x3d, r28	; 61
 5e2:	ed 01       	movw	r28, r26
 5e4:	08 95       	ret

000005e6 <__adddi3_s8>:
 5e6:	00 24       	eor	r0, r0
 5e8:	a7 fd       	sbrc	r26, 7
 5ea:	00 94       	com	r0
 5ec:	2a 0f       	add	r18, r26
 5ee:	30 1d       	adc	r19, r0
 5f0:	40 1d       	adc	r20, r0
 5f2:	50 1d       	adc	r21, r0
 5f4:	60 1d       	adc	r22, r0
 5f6:	70 1d       	adc	r23, r0
 5f8:	80 1d       	adc	r24, r0
 5fa:	90 1d       	adc	r25, r0
 5fc:	08 95       	ret

000005fe <__itoa_ncheck>:
 5fe:	bb 27       	eor	r27, r27
 600:	4a 30       	cpi	r20, 0x0A	; 10
 602:	31 f4       	brne	.+12     	; 0x610 <__itoa_ncheck+0x12>
 604:	99 23       	and	r25, r25
 606:	22 f4       	brpl	.+8      	; 0x610 <__itoa_ncheck+0x12>
 608:	bd e2       	ldi	r27, 0x2D	; 45
 60a:	90 95       	com	r25
 60c:	81 95       	neg	r24
 60e:	9f 4f       	sbci	r25, 0xFF	; 255
 610:	0c 94 0b 03 	jmp	0x616	; 0x616 <__utoa_common>

00000614 <__utoa_ncheck>:
 614:	bb 27       	eor	r27, r27

00000616 <__utoa_common>:
 616:	fb 01       	movw	r30, r22
 618:	55 27       	eor	r21, r21
 61a:	aa 27       	eor	r26, r26
 61c:	88 0f       	add	r24, r24
 61e:	99 1f       	adc	r25, r25
 620:	aa 1f       	adc	r26, r26
 622:	a4 17       	cp	r26, r20
 624:	10 f0       	brcs	.+4      	; 0x62a <__utoa_common+0x14>
 626:	a4 1b       	sub	r26, r20
 628:	83 95       	inc	r24
 62a:	50 51       	subi	r21, 0x10	; 16
 62c:	b9 f7       	brne	.-18     	; 0x61c <__utoa_common+0x6>
 62e:	a0 5d       	subi	r26, 0xD0	; 208
 630:	aa 33       	cpi	r26, 0x3A	; 58
 632:	08 f0       	brcs	.+2      	; 0x636 <__utoa_common+0x20>
 634:	a9 5d       	subi	r26, 0xD9	; 217
 636:	a1 93       	st	Z+, r26
 638:	00 97       	sbiw	r24, 0x00	; 0
 63a:	79 f7       	brne	.-34     	; 0x61a <__utoa_common+0x4>
 63c:	b1 11       	cpse	r27, r1
 63e:	b1 93       	st	Z+, r27
 640:	11 92       	st	Z+, r1
 642:	cb 01       	movw	r24, r22
 644:	0c 94 24 03 	jmp	0x648	; 0x648 <strrev>

00000648 <strrev>:
 648:	dc 01       	movw	r26, r24
 64a:	fc 01       	movw	r30, r24
 64c:	67 2f       	mov	r22, r23
 64e:	71 91       	ld	r23, Z+
 650:	77 23       	and	r23, r23
 652:	e1 f7       	brne	.-8      	; 0x64c <strrev+0x4>
 654:	32 97       	sbiw	r30, 0x02	; 2
 656:	04 c0       	rjmp	.+8      	; 0x660 <strrev+0x18>
 658:	7c 91       	ld	r23, X
 65a:	6d 93       	st	X+, r22
 65c:	70 83       	st	Z, r23
 65e:	62 91       	ld	r22, -Z
 660:	ae 17       	cp	r26, r30
 662:	bf 07       	cpc	r27, r31
 664:	c8 f3       	brcs	.-14     	; 0x658 <strrev+0x10>
 666:	08 95       	ret

00000668 <_exit>:
 668:	f8 94       	cli

0000066a <__stop_program>:
 66a:	ff cf       	rjmp	.-2      	; 0x66a <__stop_program>
