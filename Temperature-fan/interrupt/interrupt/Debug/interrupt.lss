
interrupt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000d0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  00000124  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000028  00000000  00000000  00000154  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000015b  00000000  00000000  0000017c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000eb  00000000  00000000  000002d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000159  00000000  00000000  000003c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000048  00000000  00000000  0000051c  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    0000018b  00000000  00000000  00000564  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000049  00000000  00000000  000006ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000018  00000000  00000000  00000738  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 36 00 	jmp	0x6c	; 0x6c <__vector_1>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 48 00 	call	0x90	; 0x90 <main>
  64:	0c 94 66 00 	jmp	0xcc	; 0xcc <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <__vector_1>:
#include <avr/io.h>
#include <avr/interrupt.h>
#include <util/delay.h>

ISR (INT0_vect)
{
  6c:	1f 92       	push	r1
  6e:	0f 92       	push	r0
  70:	0f b6       	in	r0, 0x3f	; 63
  72:	0f 92       	push	r0
  74:	11 24       	eor	r1, r1
  76:	8f 93       	push	r24
  78:	9f 93       	push	r25
	PORTC ^=(1<<PC1);
  7a:	95 b3       	in	r25, 0x15	; 21
  7c:	82 e0       	ldi	r24, 0x02	; 2
  7e:	89 27       	eor	r24, r25
  80:	85 bb       	out	0x15, r24	; 21
}
  82:	9f 91       	pop	r25
  84:	8f 91       	pop	r24
  86:	0f 90       	pop	r0
  88:	0f be       	out	0x3f, r0	; 63
  8a:	0f 90       	pop	r0
  8c:	1f 90       	pop	r1
  8e:	18 95       	reti

00000090 <main>:

int main(void)
{
	DDRC = 0b11000000;
  90:	80 ec       	ldi	r24, 0xC0	; 192
  92:	84 bb       	out	0x14, r24	; 20
	
	MCUCR |= (1<<ISC00);
  94:	85 b7       	in	r24, 0x35	; 53
  96:	81 60       	ori	r24, 0x01	; 1
  98:	85 bf       	out	0x35, r24	; 53
	
	GICR |=(1<<INT0);
  9a:	8b b7       	in	r24, 0x3b	; 59
  9c:	80 64       	ori	r24, 0x40	; 64
  9e:	8b bf       	out	0x3b, r24	; 59
	
	sei();
  a0:	78 94       	sei
	
    while(1)
    {
        PORTC |= (1<<PC0);
  a2:	a8 9a       	sbi	0x15, 0	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a4:	2f eb       	ldi	r18, 0xBF	; 191
  a6:	87 e2       	ldi	r24, 0x27	; 39
  a8:	99 e0       	ldi	r25, 0x09	; 9
  aa:	21 50       	subi	r18, 0x01	; 1
  ac:	80 40       	sbci	r24, 0x00	; 0
  ae:	90 40       	sbci	r25, 0x00	; 0
  b0:	e1 f7       	brne	.-8      	; 0xaa <main+0x1a>
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <main+0x24>
  b4:	00 00       	nop
		
		_delay_ms(3000); 
		
		 PORTC &= ~(1<<PC0);
  b6:	a8 98       	cbi	0x15, 0	; 21
  b8:	2f eb       	ldi	r18, 0xBF	; 191
  ba:	87 e2       	ldi	r24, 0x27	; 39
  bc:	99 e0       	ldi	r25, 0x09	; 9
  be:	21 50       	subi	r18, 0x01	; 1
  c0:	80 40       	sbci	r24, 0x00	; 0
  c2:	90 40       	sbci	r25, 0x00	; 0
  c4:	e1 f7       	brne	.-8      	; 0xbe <main+0x2e>
  c6:	00 c0       	rjmp	.+0      	; 0xc8 <main+0x38>
  c8:	00 00       	nop
  ca:	eb cf       	rjmp	.-42     	; 0xa2 <main+0x12>

000000cc <_exit>:
  cc:	f8 94       	cli

000000ce <__stop_program>:
  ce:	ff cf       	rjmp	.-2      	; 0xce <__stop_program>
