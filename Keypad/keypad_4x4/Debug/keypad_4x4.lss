
keypad_4x4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002ce  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  000002ce  00000342  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000348  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 000000c8  00000000  00000000  00000378  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000007c1  00000000  00000000  00000440  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000037a  00000000  00000000  00000c01  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000405  00000000  00000000  00000f7b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  0000017c  00000000  00000000  00001380  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000225  00000000  00000000  000014fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000625  00000000  00000000  00001721  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000000b0  00000000  00000000  00001d46  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee ec       	ldi	r30, 0xCE	; 206
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 36       	cpi	r26, 0x66	; 102
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 7f 00 	call	0xfe	; 0xfe <main>
  7a:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <GetKeyPressed>:
uint8_t GetKeyPressed()
{
	uint8_t r,c;
	uint8_t ret;

	KEYPAD_PORT|= 0x0F;
  82:	8b b3       	in	r24, 0x1b	; 27
  84:	8f 60       	ori	r24, 0x0F	; 15
  86:	8b bb       	out	0x1b, r24	; 27
  88:	80 e0       	ldi	r24, 0x00	; 0
  8a:	90 e0       	ldi	r25, 0x00	; 0

	for(c=0;c<3;c++)
	{
		KEYPAD_DDR&=~(0x7F);
		KEYPAD_DDR|=(0x40>>c);
  8c:	40 e4       	ldi	r20, 0x40	; 64
  8e:	50 e0       	ldi	r21, 0x00	; 0
  90:	78 2f       	mov	r23, r24

	KEYPAD_PORT|= 0x0F;

	for(c=0;c<3;c++)
	{
		KEYPAD_DDR&=~(0x7F);
  92:	2a b3       	in	r18, 0x1a	; 26
  94:	20 78       	andi	r18, 0x80	; 128
  96:	2a bb       	out	0x1a, r18	; 26
		KEYPAD_DDR|=(0x40>>c);
  98:	6a b3       	in	r22, 0x1a	; 26
  9a:	9a 01       	movw	r18, r20
  9c:	08 2e       	mov	r0, r24
  9e:	02 c0       	rjmp	.+4      	; 0xa4 <GetKeyPressed+0x22>
  a0:	35 95       	asr	r19
  a2:	27 95       	ror	r18
  a4:	0a 94       	dec	r0
  a6:	e2 f7       	brpl	.-8      	; 0xa0 <GetKeyPressed+0x1e>
  a8:	26 2b       	or	r18, r22
  aa:	2a bb       	out	0x1a, r18	; 26
		for(r=0;r<4;r++)
		{
			if(!(KEYPAD_PIN & (0X08>>r)))
  ac:	cb 9b       	sbis	0x19, 3	; 25
  ae:	0c c0       	rjmp	.+24     	; 0xc8 <GetKeyPressed+0x46>
  b0:	ca 9b       	sbis	0x19, 2	; 25
  b2:	06 c0       	rjmp	.+12     	; 0xc0 <GetKeyPressed+0x3e>
  b4:	c9 9b       	sbis	0x19, 1	; 25
  b6:	06 c0       	rjmp	.+12     	; 0xc4 <GetKeyPressed+0x42>
  b8:	c8 99       	sbic	0x19, 0	; 25
  ba:	14 c0       	rjmp	.+40     	; 0xe4 <GetKeyPressed+0x62>

	for(c=0;c<3;c++)
	{
		KEYPAD_DDR&=~(0x7F);
		KEYPAD_DDR|=(0x40>>c);
		for(r=0;r<4;r++)
  bc:	93 e0       	ldi	r25, 0x03	; 3
  be:	05 c0       	rjmp	.+10     	; 0xca <GetKeyPressed+0x48>
  c0:	91 e0       	ldi	r25, 0x01	; 1
  c2:	03 c0       	rjmp	.+6      	; 0xca <GetKeyPressed+0x48>
  c4:	92 e0       	ldi	r25, 0x02	; 2
  c6:	01 c0       	rjmp	.+2      	; 0xca <GetKeyPressed+0x48>
  c8:	90 e0       	ldi	r25, 0x00	; 0
		{
			if(!(KEYPAD_PIN & (0X08>>r)))
			{
				ret = (r*3+c)+49;
  ca:	7f 5c       	subi	r23, 0xCF	; 207
  cc:	89 2f       	mov	r24, r25
  ce:	88 0f       	add	r24, r24
  d0:	98 0f       	add	r25, r24
  d2:	87 2f       	mov	r24, r23
  d4:	89 0f       	add	r24, r25
				if(ret == 58) ret = '*';
  d6:	8a 33       	cpi	r24, 0x3A	; 58
  d8:	51 f0       	breq	.+20     	; 0xee <GetKeyPressed+0x6c>
				else if(ret == 59) ret = '0'; 
  da:	8b 33       	cpi	r24, 0x3B	; 59
  dc:	51 f0       	breq	.+20     	; 0xf2 <GetKeyPressed+0x70>
				else if(ret == 60) ret = '#';
  de:	8c 33       	cpi	r24, 0x3C	; 60
  e0:	51 f0       	breq	.+20     	; 0xf6 <GetKeyPressed+0x74>
  e2:	08 95       	ret
  e4:	01 96       	adiw	r24, 0x01	; 1
	uint8_t r,c;
	uint8_t ret;

	KEYPAD_PORT|= 0x0F;

	for(c=0;c<3;c++)
  e6:	83 30       	cpi	r24, 0x03	; 3
  e8:	91 05       	cpc	r25, r1
  ea:	91 f6       	brne	.-92     	; 0x90 <GetKeyPressed+0xe>
  ec:	06 c0       	rjmp	.+12     	; 0xfa <GetKeyPressed+0x78>
		for(r=0;r<4;r++)
		{
			if(!(KEYPAD_PIN & (0X08>>r)))
			{
				ret = (r*3+c)+49;
				if(ret == 58) ret = '*';
  ee:	8a e2       	ldi	r24, 0x2A	; 42
  f0:	08 95       	ret
				else if(ret == 59) ret = '0'; 
  f2:	80 e3       	ldi	r24, 0x30	; 48
  f4:	08 95       	ret
				else if(ret == 60) ret = '#';
  f6:	83 e2       	ldi	r24, 0x23	; 35
  f8:	08 95       	ret
				return(ret);
			}
		}
	}

	return NO_KEY; //no button press
  fa:	8f ef       	ldi	r24, 0xFF	; 255
}
  fc:	08 95       	ret

000000fe <main>:
int main(void)
{
	uint8_t key;
	
	//disable JTAG from PORTC
	MCUCSR |= 1<<JTD;
  fe:	84 b7       	in	r24, 0x34	; 52
 100:	80 68       	ori	r24, 0x80	; 128
 102:	84 bf       	out	0x34, r24	; 52
	MCUCSR |= 1<<JTD;
 104:	84 b7       	in	r24, 0x34	; 52
 106:	80 68       	ori	r24, 0x80	; 128
 108:	84 bf       	out	0x34, r24	; 52
	
	//initialize LCD display
	lcd_init(LCD_DISP_ON);
 10a:	8c e0       	ldi	r24, 0x0C	; 12
 10c:	0e 94 2d 01 	call	0x25a	; 0x25a <lcd_init>
	lcd_puts("key:");
 110:	80 e6       	ldi	r24, 0x60	; 96
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	0e 94 1d 01 	call	0x23a	; 0x23a <lcd_puts>

	while(1)
	{
		key = GetKeyPressed();	//Get the keycode of pressed key
 118:	0e 94 41 00 	call	0x82	; 0x82 <GetKeyPressed>
 11c:	c8 2f       	mov	r28, r24
		
		if(key != NO_KEY)
 11e:	8f 3f       	cpi	r24, 0xFF	; 255
 120:	d9 f3       	breq	.-10     	; 0x118 <main+0x1a>
		{
			//lcd_gotoxy(6, 0);		//goto lcd 0,0 location
			lcd_putc(key);			//Print it at location 0,0 on LCD.
 122:	0e 94 08 01 	call	0x210	; 0x210 <lcd_putc>
			while(key == GetKeyPressed());
 126:	0e 94 41 00 	call	0x82	; 0x82 <GetKeyPressed>
 12a:	8c 17       	cp	r24, r28
 12c:	e1 f3       	breq	.-8      	; 0x126 <main+0x28>
 12e:	f4 cf       	rjmp	.-24     	; 0x118 <main+0x1a>

00000130 <toggle_e>:

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
 130:	96 9a       	sbi	0x12, 6	; 18
    lcd_e_delay();
 132:	00 c0       	rjmp	.+0      	; 0x134 <toggle_e+0x4>
    lcd_e_low();
 134:	96 98       	cbi	0x12, 6	; 18
 136:	08 95       	ret

00000138 <lcd_write>:
                 0: write instruction
Returns:  none
*************************************************************************/
#if LCD_IO_MODE
static void lcd_write(uint8_t data,uint8_t rs) 
{
 138:	cf 93       	push	r28
 13a:	c8 2f       	mov	r28, r24
    unsigned char dataBits ;


    if (rs) {   /* write data        (RS=1, RW=0) */
 13c:	66 23       	and	r22, r22
 13e:	11 f0       	breq	.+4      	; 0x144 <lcd_write+0xc>
       lcd_rs_high();
 140:	94 9a       	sbi	0x12, 4	; 18
 142:	01 c0       	rjmp	.+2      	; 0x146 <lcd_write+0xe>
    } else {    /* write instruction (RS=0, RW=0) */
       lcd_rs_low();
 144:	94 98       	cbi	0x12, 4	; 18
    }
    lcd_rw_low();
 146:	95 98       	cbi	0x12, 5	; 18
        LCD_DATA0_PORT = dataBits | 0x0F;
    }
    else
    {
        /* configure data pins as output */
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 148:	a4 9a       	sbi	0x14, 4	; 20
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 14a:	a5 9a       	sbi	0x14, 5	; 20
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 14c:	a6 9a       	sbi	0x14, 6	; 20
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 14e:	a7 9a       	sbi	0x14, 7	; 20
        
        /* output high nibble first */
        LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
 150:	af 98       	cbi	0x15, 7	; 21
        LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
 152:	ae 98       	cbi	0x15, 6	; 21
        LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
 154:	ad 98       	cbi	0x15, 5	; 21
        LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
 156:	ac 98       	cbi	0x15, 4	; 21
    	if(data & 0x80) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
 158:	cc 23       	and	r28, r28
 15a:	0c f4       	brge	.+2      	; 0x15e <lcd_write+0x26>
 15c:	af 9a       	sbi	0x15, 7	; 21
    	if(data & 0x40) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
 15e:	c6 fd       	sbrc	r28, 6
 160:	ae 9a       	sbi	0x15, 6	; 21
    	if(data & 0x20) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
 162:	c5 fd       	sbrc	r28, 5
 164:	ad 9a       	sbi	0x15, 5	; 21
    	if(data & 0x10) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);   
 166:	c4 fd       	sbrc	r28, 4
 168:	ac 9a       	sbi	0x15, 4	; 21
        lcd_e_toggle();
 16a:	0e 94 98 00 	call	0x130	; 0x130 <toggle_e>
        
        /* output low nibble */
        LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
 16e:	af 98       	cbi	0x15, 7	; 21
        LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
 170:	ae 98       	cbi	0x15, 6	; 21
        LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
 172:	ad 98       	cbi	0x15, 5	; 21
        LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
 174:	ac 98       	cbi	0x15, 4	; 21
    	if(data & 0x08) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
 176:	c3 fd       	sbrc	r28, 3
 178:	af 9a       	sbi	0x15, 7	; 21
    	if(data & 0x04) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
 17a:	c2 fd       	sbrc	r28, 2
 17c:	ae 9a       	sbi	0x15, 6	; 21
    	if(data & 0x02) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
 17e:	c1 fd       	sbrc	r28, 1
 180:	ad 9a       	sbi	0x15, 5	; 21
    	if(data & 0x01) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
 182:	c0 fd       	sbrc	r28, 0
 184:	ac 9a       	sbi	0x15, 4	; 21
        lcd_e_toggle();        
 186:	0e 94 98 00 	call	0x130	; 0x130 <toggle_e>
        
        /* all data pins high (inactive) */
        LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
 18a:	ac 9a       	sbi	0x15, 4	; 21
        LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
 18c:	ad 9a       	sbi	0x15, 5	; 21
        LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
 18e:	ae 9a       	sbi	0x15, 6	; 21
        LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
 190:	af 9a       	sbi	0x15, 7	; 21
    }
}
 192:	cf 91       	pop	r28
 194:	08 95       	ret

00000196 <lcd_read>:
static uint8_t lcd_read(uint8_t rs) 
{
    uint8_t data;
    
    
    if (rs)
 196:	88 23       	and	r24, r24
 198:	11 f0       	breq	.+4      	; 0x19e <lcd_read+0x8>
        lcd_rs_high();                       /* RS=1: read data      */
 19a:	94 9a       	sbi	0x12, 4	; 18
 19c:	01 c0       	rjmp	.+2      	; 0x1a0 <lcd_read+0xa>
    else
        lcd_rs_low();                        /* RS=0: read busy flag */
 19e:	94 98       	cbi	0x12, 4	; 18
    lcd_rw_high();                           /* RW=1  read mode      */
 1a0:	95 9a       	sbi	0x12, 5	; 18
        lcd_e_low();
    }
    else
    {
        /* configure data pins as input */
        DDR(LCD_DATA0_PORT) &= ~_BV(LCD_DATA0_PIN);
 1a2:	a4 98       	cbi	0x14, 4	; 20
        DDR(LCD_DATA1_PORT) &= ~_BV(LCD_DATA1_PIN);
 1a4:	a5 98       	cbi	0x14, 5	; 20
        DDR(LCD_DATA2_PORT) &= ~_BV(LCD_DATA2_PIN);
 1a6:	a6 98       	cbi	0x14, 6	; 20
        DDR(LCD_DATA3_PORT) &= ~_BV(LCD_DATA3_PIN);
 1a8:	a7 98       	cbi	0x14, 7	; 20
                
        /* read high nibble first */
        lcd_e_high();
 1aa:	96 9a       	sbi	0x12, 6	; 18
        lcd_e_delay();        
 1ac:	00 c0       	rjmp	.+0      	; 0x1ae <lcd_read+0x18>
        data = 0;
        if ( PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x10;
 1ae:	9c 99       	sbic	0x13, 4	; 19
 1b0:	02 c0       	rjmp	.+4      	; 0x1b6 <lcd_read+0x20>
        DDR(LCD_DATA3_PORT) &= ~_BV(LCD_DATA3_PIN);
                
        /* read high nibble first */
        lcd_e_high();
        lcd_e_delay();        
        data = 0;
 1b2:	80 e0       	ldi	r24, 0x00	; 0
 1b4:	01 c0       	rjmp	.+2      	; 0x1b8 <lcd_read+0x22>
        if ( PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x10;
 1b6:	80 e1       	ldi	r24, 0x10	; 16
        if ( PIN(LCD_DATA1_PORT) & _BV(LCD_DATA1_PIN) ) data |= 0x20;
 1b8:	9d 99       	sbic	0x13, 5	; 19
 1ba:	80 62       	ori	r24, 0x20	; 32
        if ( PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x40;
 1bc:	9e 99       	sbic	0x13, 6	; 19
 1be:	80 64       	ori	r24, 0x40	; 64
        if ( PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x80;
 1c0:	9f 99       	sbic	0x13, 7	; 19
 1c2:	80 68       	ori	r24, 0x80	; 128
        lcd_e_low();
 1c4:	96 98       	cbi	0x12, 6	; 18

        lcd_e_delay();                       /* Enable 500ns low       */
 1c6:	00 c0       	rjmp	.+0      	; 0x1c8 <lcd_read+0x32>
    
        /* read low nibble */    
        lcd_e_high();
 1c8:	96 9a       	sbi	0x12, 6	; 18
        lcd_e_delay();
 1ca:	00 c0       	rjmp	.+0      	; 0x1cc <lcd_read+0x36>
        if ( PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x01;
 1cc:	9c 99       	sbic	0x13, 4	; 19
 1ce:	81 60       	ori	r24, 0x01	; 1
        if ( PIN(LCD_DATA1_PORT) & _BV(LCD_DATA1_PIN) ) data |= 0x02;
 1d0:	9d 99       	sbic	0x13, 5	; 19
 1d2:	82 60       	ori	r24, 0x02	; 2
        if ( PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x04;
 1d4:	9e 99       	sbic	0x13, 6	; 19
 1d6:	84 60       	ori	r24, 0x04	; 4
        if ( PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x08;        
 1d8:	9f 99       	sbic	0x13, 7	; 19
 1da:	88 60       	ori	r24, 0x08	; 8
        lcd_e_low();
 1dc:	96 98       	cbi	0x12, 6	; 18
    }
    return data;
}
 1de:	08 95       	ret

000001e0 <lcd_waitbusy>:

{
    register uint8_t c;
    
    /* wait until busy flag is cleared */
    while ( (c=lcd_read(0)) & (1<<LCD_BUSY)) {}
 1e0:	80 e0       	ldi	r24, 0x00	; 0
 1e2:	0e 94 cb 00 	call	0x196	; 0x196 <lcd_read>
 1e6:	88 23       	and	r24, r24
 1e8:	dc f3       	brlt	.-10     	; 0x1e0 <lcd_waitbusy>
 delay loop for small accurate delays: 16-bit counter, 4 cycles/loop
*************************************************************************/
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
 1ea:	00 c0       	rjmp	.+0      	; 0x1ec <lcd_waitbusy+0xc>
    
    /* the address counter is updated 4us after the busy flag is cleared */
    delay(2);

    /* now read the address counter */
    return (lcd_read(0));  // return address counter
 1ec:	80 e0       	ldi	r24, 0x00	; 0
 1ee:	0e 94 cb 00 	call	0x196	; 0x196 <lcd_read>
    
}/* lcd_waitbusy */
 1f2:	08 95       	ret

000001f4 <lcd_command>:
Send LCD controller instruction command
Input:   instruction to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_command(uint8_t cmd)
{
 1f4:	cf 93       	push	r28
 1f6:	c8 2f       	mov	r28, r24
    lcd_waitbusy();
 1f8:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <lcd_waitbusy>
    lcd_write(cmd,0);
 1fc:	60 e0       	ldi	r22, 0x00	; 0
 1fe:	8c 2f       	mov	r24, r28
 200:	0e 94 9c 00 	call	0x138	; 0x138 <lcd_write>
}
 204:	cf 91       	pop	r28
 206:	08 95       	ret

00000208 <lcd_clrscr>:
/*************************************************************************
Clear display and set cursor to home position
*************************************************************************/
void lcd_clrscr(void)
{
    lcd_command(1<<LCD_CLR);
 208:	81 e0       	ldi	r24, 0x01	; 1
 20a:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_command>
 20e:	08 95       	ret

00000210 <lcd_putc>:
Display character at current cursor position 
Input:    character to be displayed                                       
Returns:  none
*************************************************************************/
void lcd_putc(char c)
{
 210:	cf 93       	push	r28
 212:	c8 2f       	mov	r28, r24
    uint8_t pos;


    pos = lcd_waitbusy();   // read busy-flag and address counter
 214:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <lcd_waitbusy>
    if (c=='\n')
 218:	ca 30       	cpi	r28, 0x0A	; 10
 21a:	49 f4       	brne	.+18     	; 0x22e <lcd_putc+0x1e>

#if LCD_LINES==1
    addressCounter = 0;
#endif
#if LCD_LINES==2
    if ( pos < (LCD_START_LINE2) )
 21c:	80 34       	cpi	r24, 0x40	; 64
 21e:	10 f4       	brcc	.+4      	; 0x224 <lcd_putc+0x14>
        addressCounter = LCD_START_LINE2;
 220:	80 e4       	ldi	r24, 0x40	; 64
 222:	01 c0       	rjmp	.+2      	; 0x226 <lcd_putc+0x16>
    else
        addressCounter = LCD_START_LINE1;
 224:	80 e0       	ldi	r24, 0x00	; 0
        addressCounter = LCD_START_LINE4;
    else 
        addressCounter = LCD_START_LINE1;
#endif
#endif
    lcd_command((1<<LCD_DDRAM)+addressCounter);
 226:	80 58       	subi	r24, 0x80	; 128
 228:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_command>
 22c:	04 c0       	rjmp	.+8      	; 0x236 <lcd_putc+0x26>
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1,0);
        }
#endif
        lcd_waitbusy();
#endif
        lcd_write(c, 1);
 22e:	61 e0       	ldi	r22, 0x01	; 1
 230:	8c 2f       	mov	r24, r28
 232:	0e 94 9c 00 	call	0x138	; 0x138 <lcd_write>
    }

}/* lcd_putc */
 236:	cf 91       	pop	r28
 238:	08 95       	ret

0000023a <lcd_puts>:
Input:    string to be displayed
Returns:  none
*************************************************************************/
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
 23a:	cf 93       	push	r28
 23c:	df 93       	push	r29
    register char c;

    while ( (c = *s++) ) {
 23e:	ec 01       	movw	r28, r24
 240:	21 96       	adiw	r28, 0x01	; 1
 242:	fc 01       	movw	r30, r24
 244:	80 81       	ld	r24, Z
 246:	88 23       	and	r24, r24
 248:	29 f0       	breq	.+10     	; 0x254 <lcd_puts+0x1a>
        lcd_putc(c);
 24a:	0e 94 08 01 	call	0x210	; 0x210 <lcd_putc>
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = *s++) ) {
 24e:	89 91       	ld	r24, Y+
 250:	81 11       	cpse	r24, r1
 252:	fb cf       	rjmp	.-10     	; 0x24a <lcd_puts+0x10>
        lcd_putc(c);
    }

}/* lcd_puts */
 254:	df 91       	pop	r29
 256:	cf 91       	pop	r28
 258:	08 95       	ret

0000025a <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 25a:	cf 93       	push	r28
 25c:	c8 2f       	mov	r28, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 25e:	8c 9a       	sbi	0x11, 4	; 17
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 260:	8d 9a       	sbi	0x11, 5	; 17
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 262:	8e 9a       	sbi	0x11, 6	; 17
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 264:	a4 9a       	sbi	0x14, 4	; 20
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 266:	a5 9a       	sbi	0x14, 5	; 20
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 268:	a6 9a       	sbi	0x14, 6	; 20
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 26a:	a7 9a       	sbi	0x14, 7	; 20
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 26c:	e0 ea       	ldi	r30, 0xA0	; 160
 26e:	ff e0       	ldi	r31, 0x0F	; 15
 270:	31 97       	sbiw	r30, 0x01	; 1
 272:	f1 f7       	brne	.-4      	; 0x270 <lcd_init+0x16>
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
    }
    delay(16000);        /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);  // _BV(LCD_FUNCTION)>>4;
 274:	ad 9a       	sbi	0x15, 5	; 21
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
 276:	ac 9a       	sbi	0x15, 4	; 21
    lcd_e_toggle();
 278:	0e 94 98 00 	call	0x130	; 0x130 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 27c:	e0 ee       	ldi	r30, 0xE0	; 224
 27e:	f4 e0       	ldi	r31, 0x04	; 4
 280:	31 97       	sbiw	r30, 0x01	; 1
 282:	f1 f7       	brne	.-4      	; 0x280 <lcd_init+0x26>
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
    lcd_e_toggle();
    delay(4992);         /* delay, busy flag can't be checked here */
   
    /* repeat last command */ 
    lcd_e_toggle();      
 284:	0e 94 98 00 	call	0x130	; 0x130 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 288:	e0 e1       	ldi	r30, 0x10	; 16
 28a:	f0 e0       	ldi	r31, 0x00	; 0
 28c:	31 97       	sbiw	r30, 0x01	; 1
 28e:	f1 f7       	brne	.-4      	; 0x28c <lcd_init+0x32>
    /* repeat last command */ 
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */
    
    /* repeat last command a third time */
    lcd_e_toggle();      
 290:	0e 94 98 00 	call	0x130	; 0x130 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 294:	e0 e1       	ldi	r30, 0x10	; 16
 296:	f0 e0       	ldi	r31, 0x00	; 0
 298:	31 97       	sbiw	r30, 0x01	; 1
 29a:	f1 f7       	brne	.-4      	; 0x298 <lcd_init+0x3e>
    /* repeat last command a third time */
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
 29c:	ac 98       	cbi	0x15, 4	; 21
    lcd_e_toggle();
 29e:	0e 94 98 00 	call	0x130	; 0x130 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 2a2:	e0 e1       	ldi	r30, 0x10	; 16
 2a4:	f0 e0       	ldi	r31, 0x00	; 0
 2a6:	31 97       	sbiw	r30, 0x01	; 1
 2a8:	f1 f7       	brne	.-4      	; 0x2a6 <lcd_init+0x4c>
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
 2aa:	88 e2       	ldi	r24, 0x28	; 40
 2ac:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
 2b0:	88 e0       	ldi	r24, 0x08	; 8
 2b2:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_command>
    lcd_clrscr();                           /* display clear                */ 
 2b6:	0e 94 04 01 	call	0x208	; 0x208 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
 2ba:	86 e0       	ldi	r24, 0x06	; 6
 2bc:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
 2c0:	8c 2f       	mov	r24, r28
 2c2:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_command>

}/* lcd_init */
 2c6:	cf 91       	pop	r28
 2c8:	08 95       	ret

000002ca <_exit>:
 2ca:	f8 94       	cli

000002cc <__stop_program>:
 2cc:	ff cf       	rjmp	.-2      	; 0x2cc <__stop_program>
