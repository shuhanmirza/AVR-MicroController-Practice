
Obstacle Avoiding Robot.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000116  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  0000016a  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000050  00000000  00000000  0000019a  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000002b4  00000000  00000000  000001ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000fd  00000000  00000000  0000049e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000001f5  00000000  00000000  0000059b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000084  00000000  00000000  00000790  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000001e0  00000000  00000000  00000814  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_ranges 00000040  00000000  00000000  000009f4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 4f 00 	call	0x9e	; 0x9e <main>
  64:	0c 94 89 00 	jmp	0x112	; 0x112 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <Robot_Forward>:
#include <avr/io.h>
#include <util/delay.h>

void Robot_Forward()
{
	setBit(MOTORPORT, LEFTMOTORA);		// high
  6c:	92 9a       	sbi	0x12, 2	; 18
	clearBit(MOTORPORT, LEFTMOTORB);	// low
  6e:	93 98       	cbi	0x12, 3	; 18
	
	setBit(MOTORPORT, RIGHTMOTORA);		// high
  70:	96 9a       	sbi	0x12, 6	; 18
	clearBit(MOTORPORT, RIGHTMOTORB);	// low
  72:	97 98       	cbi	0x12, 7	; 18
  74:	08 95       	ret

00000076 <Robot_Backward>:
}

void Robot_Backward()
{
	clearBit(MOTORPORT, LEFTMOTORA);	// low
  76:	92 98       	cbi	0x12, 2	; 18
	setBit(MOTORPORT, LEFTMOTORB);		// high
  78:	93 9a       	sbi	0x12, 3	; 18
	
	clearBit(MOTORPORT, RIGHTMOTORA);	// low
  7a:	96 98       	cbi	0x12, 6	; 18
	setBit(MOTORPORT, RIGHTMOTORB);		// high
  7c:	97 9a       	sbi	0x12, 7	; 18
  7e:	08 95       	ret

00000080 <Robot_Left>:
}

void Robot_Left()
{
	clearBit(MOTORPORT, LEFTMOTORA);	// low
  80:	92 98       	cbi	0x12, 2	; 18
	setBit(MOTORPORT, LEFTMOTORB);		// high
  82:	93 9a       	sbi	0x12, 3	; 18
	
	setBit(MOTORPORT, RIGHTMOTORA);		// high
  84:	96 9a       	sbi	0x12, 6	; 18
	clearBit(MOTORPORT, RIGHTMOTORB);	// low
  86:	97 98       	cbi	0x12, 7	; 18
  88:	08 95       	ret

0000008a <Robot_Right>:
}

void Robot_Right()
{
	setBit(MOTORPORT, LEFTMOTORA);		// high
  8a:	92 9a       	sbi	0x12, 2	; 18
	clearBit(MOTORPORT, LEFTMOTORB);	// low
  8c:	93 98       	cbi	0x12, 3	; 18
	
	clearBit(MOTORPORT, RIGHTMOTORA);	// low
  8e:	96 98       	cbi	0x12, 6	; 18
	setBit(MOTORPORT, RIGHTMOTORB);		// high
  90:	97 9a       	sbi	0x12, 7	; 18
  92:	08 95       	ret

00000094 <Robot_Stop>:
}

void Robot_Stop()
{
	clearBit(MOTORPORT, LEFTMOTORA);	// low
  94:	92 98       	cbi	0x12, 2	; 18
	clearBit(MOTORPORT, LEFTMOTORB);	// low
  96:	93 98       	cbi	0x12, 3	; 18
	
	clearBit(MOTORPORT, RIGHTMOTORA);	// low
  98:	96 98       	cbi	0x12, 6	; 18
	clearBit(MOTORPORT, RIGHTMOTORB);	// low
  9a:	97 98       	cbi	0x12, 7	; 18
  9c:	08 95       	ret

0000009e <main>:



int main(void)
{
    DDRD = 0xff;
  9e:	8f ef       	ldi	r24, 0xFF	; 255
  a0:	81 bb       	out	0x11, r24	; 17
	
	while(1)
    {
        Robot_Forward();
  a2:	0e 94 36 00 	call	0x6c	; 0x6c <Robot_Forward>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a6:	2f e3       	ldi	r18, 0x3F	; 63
  a8:	82 e4       	ldi	r24, 0x42	; 66
  aa:	9f e0       	ldi	r25, 0x0F	; 15
  ac:	21 50       	subi	r18, 0x01	; 1
  ae:	80 40       	sbci	r24, 0x00	; 0
  b0:	90 40       	sbci	r25, 0x00	; 0
  b2:	e1 f7       	brne	.-8      	; 0xac <main+0xe>
  b4:	00 c0       	rjmp	.+0      	; 0xb6 <main+0x18>
  b6:	00 00       	nop
		_delay_ms(5000);
		
		Robot_Backward();
  b8:	0e 94 3b 00 	call	0x76	; 0x76 <Robot_Backward>
  bc:	2f e3       	ldi	r18, 0x3F	; 63
  be:	82 e4       	ldi	r24, 0x42	; 66
  c0:	9f e0       	ldi	r25, 0x0F	; 15
  c2:	21 50       	subi	r18, 0x01	; 1
  c4:	80 40       	sbci	r24, 0x00	; 0
  c6:	90 40       	sbci	r25, 0x00	; 0
  c8:	e1 f7       	brne	.-8      	; 0xc2 <main+0x24>
  ca:	00 c0       	rjmp	.+0      	; 0xcc <main+0x2e>
  cc:	00 00       	nop
		_delay_ms(5000);
		
		Robot_Left();
  ce:	0e 94 40 00 	call	0x80	; 0x80 <Robot_Left>
  d2:	2f eb       	ldi	r18, 0xBF	; 191
  d4:	87 e2       	ldi	r24, 0x27	; 39
  d6:	99 e0       	ldi	r25, 0x09	; 9
  d8:	21 50       	subi	r18, 0x01	; 1
  da:	80 40       	sbci	r24, 0x00	; 0
  dc:	90 40       	sbci	r25, 0x00	; 0
  de:	e1 f7       	brne	.-8      	; 0xd8 <main+0x3a>
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <main+0x44>
  e2:	00 00       	nop
		_delay_ms(3000);
		
		Robot_Right();
  e4:	0e 94 45 00 	call	0x8a	; 0x8a <Robot_Right>
  e8:	2f eb       	ldi	r18, 0xBF	; 191
  ea:	87 e2       	ldi	r24, 0x27	; 39
  ec:	99 e0       	ldi	r25, 0x09	; 9
  ee:	21 50       	subi	r18, 0x01	; 1
  f0:	80 40       	sbci	r24, 0x00	; 0
  f2:	90 40       	sbci	r25, 0x00	; 0
  f4:	e1 f7       	brne	.-8      	; 0xee <main+0x50>
  f6:	00 c0       	rjmp	.+0      	; 0xf8 <main+0x5a>
  f8:	00 00       	nop
		_delay_ms(3000);
		
		Robot_Stop();
  fa:	0e 94 4a 00 	call	0x94	; 0x94 <Robot_Stop>
  fe:	2f e3       	ldi	r18, 0x3F	; 63
 100:	82 e4       	ldi	r24, 0x42	; 66
 102:	9f e0       	ldi	r25, 0x0F	; 15
 104:	21 50       	subi	r18, 0x01	; 1
 106:	80 40       	sbci	r24, 0x00	; 0
 108:	90 40       	sbci	r25, 0x00	; 0
 10a:	e1 f7       	brne	.-8      	; 0x104 <main+0x66>
 10c:	00 c0       	rjmp	.+0      	; 0x10e <main+0x70>
 10e:	00 00       	nop
 110:	c8 cf       	rjmp	.-112    	; 0xa2 <main+0x4>

00000112 <_exit>:
 112:	f8 94       	cli

00000114 <__stop_program>:
 114:	ff cf       	rjmp	.-2      	; 0x114 <__stop_program>
