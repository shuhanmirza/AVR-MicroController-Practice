
Obstacle Avoiding Robot.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001d0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  00000224  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000050  00000000  00000000  00000254  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000048c  00000000  00000000  000002a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000e5  00000000  00000000  00000730  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000026c  00000000  00000000  00000815  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000084  00000000  00000000  00000a84  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000001f9  00000000  00000000  00000b08  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_ranges 00000040  00000000  00000000  00000d01  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 64 00 	call	0xc8	; 0xc8 <main>
  64:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <pwm_init>:



void pwm_init()
{
	setBit(DDRD, PD4);	// output mode
  6c:	8c 9a       	sbi	0x11, 4	; 17
	setBit(DDRD, PD5);	// output mode
  6e:	8d 9a       	sbi	0x11, 5	; 17
	
	TCCR1A |= (1<<WGM10);				//fast pwm 8 bit
  70:	8f b5       	in	r24, 0x2f	; 47
  72:	81 60       	ori	r24, 0x01	; 1
  74:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= (1<<WGM12);				//fast pwm 8 bit
  76:	8e b5       	in	r24, 0x2e	; 46
  78:	88 60       	ori	r24, 0x08	; 8
  7a:	8e bd       	out	0x2e, r24	; 46
	TCCR1A |= (1<<COM1A1)|(1<<COM1B1);	//enable OC1A and OC1B
  7c:	8f b5       	in	r24, 0x2f	; 47
  7e:	80 6a       	ori	r24, 0xA0	; 160
  80:	8f bd       	out	0x2f, r24	; 47
	
	TCCR1B |= (1<<CS11);				//set timer1 prescaler 8
  82:	8e b5       	in	r24, 0x2e	; 46
  84:	82 60       	ori	r24, 0x02	; 2
  86:	8e bd       	out	0x2e, r24	; 46
	
	OCR1A = 100;		//duty cycle for motor2
  88:	84 e6       	ldi	r24, 0x64	; 100
  8a:	90 e0       	ldi	r25, 0x00	; 0
  8c:	9b bd       	out	0x2b, r25	; 43
  8e:	8a bd       	out	0x2a, r24	; 42
	OCR1B = 100;		//duty cycle for motor1
  90:	99 bd       	out	0x29, r25	; 41
  92:	88 bd       	out	0x28, r24	; 40
  94:	08 95       	ret

00000096 <Robot_Forward>:
}


void Robot_Forward()
{
	setBit(MOTORPORT, LEFTMOTORB);		// high
  96:	c0 9a       	sbi	0x18, 0	; 24
	clearBit(MOTORPORT, LEFTMOTORA);	// low
  98:	c1 98       	cbi	0x18, 1	; 24
	
	setBit(MOTORPORT, RIGHTMOTORB);		// high
  9a:	c2 9a       	sbi	0x18, 2	; 24
	clearBit(MOTORPORT, RIGHTMOTORA);	// low
  9c:	c3 98       	cbi	0x18, 3	; 24
  9e:	08 95       	ret

000000a0 <Robot_Backward>:
}

void Robot_Backward()
{
	clearBit(MOTORPORT, LEFTMOTORB);	// low
  a0:	c0 98       	cbi	0x18, 0	; 24
	setBit(MOTORPORT, LEFTMOTORA);		// high
  a2:	c1 9a       	sbi	0x18, 1	; 24
	
	clearBit(MOTORPORT, RIGHTMOTORB);	// low
  a4:	c2 98       	cbi	0x18, 2	; 24
	setBit(MOTORPORT, RIGHTMOTORA);		// high
  a6:	c3 9a       	sbi	0x18, 3	; 24
  a8:	08 95       	ret

000000aa <Robot_Left>:
}

void Robot_Left()
{
	clearBit(MOTORPORT, LEFTMOTORB);	// low
  aa:	c0 98       	cbi	0x18, 0	; 24
	setBit(MOTORPORT, LEFTMOTORA);		// high
  ac:	c1 9a       	sbi	0x18, 1	; 24
	
	setBit(MOTORPORT, RIGHTMOTORB);		// high
  ae:	c2 9a       	sbi	0x18, 2	; 24
	clearBit(MOTORPORT, RIGHTMOTORA);	// low
  b0:	c3 98       	cbi	0x18, 3	; 24
  b2:	08 95       	ret

000000b4 <Robot_Right>:
}

void Robot_Right()
{
	setBit(MOTORPORT, LEFTMOTORB);		// high
  b4:	c0 9a       	sbi	0x18, 0	; 24
	clearBit(MOTORPORT, LEFTMOTORA);	// low
  b6:	c1 98       	cbi	0x18, 1	; 24
	
	clearBit(MOTORPORT, RIGHTMOTORB);	// low
  b8:	c2 98       	cbi	0x18, 2	; 24
	setBit(MOTORPORT, RIGHTMOTORA);		// high
  ba:	c3 9a       	sbi	0x18, 3	; 24
  bc:	08 95       	ret

000000be <Robot_Stop>:
}

void Robot_Stop()
{
	clearBit(MOTORPORT, LEFTMOTORA);	// low
  be:	c1 98       	cbi	0x18, 1	; 24
	clearBit(MOTORPORT, LEFTMOTORB);	// low
  c0:	c0 98       	cbi	0x18, 0	; 24
	
	clearBit(MOTORPORT, RIGHTMOTORA);	// low
  c2:	c3 98       	cbi	0x18, 3	; 24
	clearBit(MOTORPORT, RIGHTMOTORB);	// low
  c4:	c2 98       	cbi	0x18, 2	; 24
  c6:	08 95       	ret

000000c8 <main>:


int main(void)
{
   
   DDRD = 0xff;
  c8:	8f ef       	ldi	r24, 0xFF	; 255
  ca:	81 bb       	out	0x11, r24	; 17
   DDRB=0xff;
  cc:	87 bb       	out	0x17, r24	; 23
   
   pwm_init();
  ce:	0e 94 36 00 	call	0x6c	; 0x6c <pwm_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d2:	2f e3       	ldi	r18, 0x3F	; 63
  d4:	82 e4       	ldi	r24, 0x42	; 66
  d6:	9f e0       	ldi	r25, 0x0F	; 15
  d8:	21 50       	subi	r18, 0x01	; 1
  da:	80 40       	sbci	r24, 0x00	; 0
  dc:	90 40       	sbci	r25, 0x00	; 0
  de:	e1 f7       	brne	.-8      	; 0xd8 <main+0x10>
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <main+0x1a>
  e2:	00 00       	nop
   
   while(1)
   {
	   _delay_ms(5000);
	   
	   Robot_Forward();
  e4:	0e 94 4b 00 	call	0x96	; 0x96 <Robot_Forward>
  e8:	2f e3       	ldi	r18, 0x3F	; 63
  ea:	8d e0       	ldi	r24, 0x0D	; 13
  ec:	93 e0       	ldi	r25, 0x03	; 3
  ee:	21 50       	subi	r18, 0x01	; 1
  f0:	80 40       	sbci	r24, 0x00	; 0
  f2:	90 40       	sbci	r25, 0x00	; 0
  f4:	e1 f7       	brne	.-8      	; 0xee <main+0x26>
  f6:	00 c0       	rjmp	.+0      	; 0xf8 <main+0x30>
  f8:	00 00       	nop
	   _delay_ms(1000);
	   
	   Robot_Backward();
  fa:	0e 94 50 00 	call	0xa0	; 0xa0 <Robot_Backward>
  fe:	2f e3       	ldi	r18, 0x3F	; 63
 100:	8d e0       	ldi	r24, 0x0D	; 13
 102:	93 e0       	ldi	r25, 0x03	; 3
 104:	21 50       	subi	r18, 0x01	; 1
 106:	80 40       	sbci	r24, 0x00	; 0
 108:	90 40       	sbci	r25, 0x00	; 0
 10a:	e1 f7       	brne	.-8      	; 0x104 <main+0x3c>
 10c:	00 c0       	rjmp	.+0      	; 0x10e <main+0x46>
 10e:	00 00       	nop
	   _delay_ms(1000);
	   
	   Robot_Stop();
 110:	0e 94 5f 00 	call	0xbe	; 0xbe <Robot_Stop>
 114:	2f ef       	ldi	r18, 0xFF	; 255
 116:	84 e3       	ldi	r24, 0x34	; 52
 118:	9c e0       	ldi	r25, 0x0C	; 12
 11a:	21 50       	subi	r18, 0x01	; 1
 11c:	80 40       	sbci	r24, 0x00	; 0
 11e:	90 40       	sbci	r25, 0x00	; 0
 120:	e1 f7       	brne	.-8      	; 0x11a <main+0x52>
 122:	00 c0       	rjmp	.+0      	; 0x124 <main+0x5c>
 124:	00 00       	nop
	   _delay_ms(4000);
	   
	  Robot_Right(); //45
 126:	0e 94 5a 00 	call	0xb4	; 0xb4 <Robot_Right>
 12a:	8b e5       	ldi	r24, 0x5B	; 91
 12c:	94 e4       	ldi	r25, 0x44	; 68
 12e:	01 97       	sbiw	r24, 0x01	; 1
 130:	f1 f7       	brne	.-4      	; 0x12e <main+0x66>
 132:	00 c0       	rjmp	.+0      	; 0x134 <main+0x6c>
 134:	00 00       	nop
	  _delay_ms(70);
	  Robot_Stop();
 136:	0e 94 5f 00 	call	0xbe	; 0xbe <Robot_Stop>
 13a:	9f e7       	ldi	r25, 0x7F	; 127
 13c:	2a e1       	ldi	r18, 0x1A	; 26
 13e:	86 e0       	ldi	r24, 0x06	; 6
 140:	91 50       	subi	r25, 0x01	; 1
 142:	20 40       	sbci	r18, 0x00	; 0
 144:	80 40       	sbci	r24, 0x00	; 0
 146:	e1 f7       	brne	.-8      	; 0x140 <main+0x78>
 148:	00 c0       	rjmp	.+0      	; 0x14a <main+0x82>
 14a:	00 00       	nop
	  _delay_ms(2000);
		   
		   Robot_Left(); //90
 14c:	0e 94 55 00 	call	0xaa	; 0xaa <Robot_Left>
 150:	85 e3       	ldi	r24, 0x35	; 53
 152:	91 ef       	ldi	r25, 0xF1	; 241
 154:	01 97       	sbiw	r24, 0x01	; 1
 156:	f1 f7       	brne	.-4      	; 0x154 <main+0x8c>
 158:	00 c0       	rjmp	.+0      	; 0x15a <main+0x92>
 15a:	00 00       	nop
		   _delay_ms(47.5 * 5.2);
		   Robot_Stop();
 15c:	0e 94 5f 00 	call	0xbe	; 0xbe <Robot_Stop>
 160:	9f e7       	ldi	r25, 0x7F	; 127
 162:	2a e1       	ldi	r18, 0x1A	; 26
 164:	86 e0       	ldi	r24, 0x06	; 6
 166:	91 50       	subi	r25, 0x01	; 1
 168:	20 40       	sbci	r18, 0x00	; 0
 16a:	80 40       	sbci	r24, 0x00	; 0
 16c:	e1 f7       	brne	.-8      	; 0x166 <main+0x9e>
 16e:	00 c0       	rjmp	.+0      	; 0x170 <main+0xa8>
 170:	00 00       	nop
		   _delay_ms(2000);
		   
		   Robot_Right(); //180
 172:	0e 94 5a 00 	call	0xb4	; 0xb4 <Robot_Right>
 176:	9f e9       	ldi	r25, 0x9F	; 159
 178:	2d e6       	ldi	r18, 0x6D	; 109
 17a:	81 e0       	ldi	r24, 0x01	; 1
 17c:	91 50       	subi	r25, 0x01	; 1
 17e:	20 40       	sbci	r18, 0x00	; 0
 180:	80 40       	sbci	r24, 0x00	; 0
 182:	e1 f7       	brne	.-8      	; 0x17c <main+0xb4>
 184:	00 c0       	rjmp	.+0      	; 0x186 <main+0xbe>
 186:	00 00       	nop
		   _delay_ms(90 * 5.2);
		   Robot_Stop();
 188:	0e 94 5f 00 	call	0xbe	; 0xbe <Robot_Stop>
 18c:	9f e7       	ldi	r25, 0x7F	; 127
 18e:	2a e1       	ldi	r18, 0x1A	; 26
 190:	86 e0       	ldi	r24, 0x06	; 6
 192:	91 50       	subi	r25, 0x01	; 1
 194:	20 40       	sbci	r18, 0x00	; 0
 196:	80 40       	sbci	r24, 0x00	; 0
 198:	e1 f7       	brne	.-8      	; 0x192 <main+0xca>
 19a:	00 c0       	rjmp	.+0      	; 0x19c <main+0xd4>
 19c:	00 00       	nop
		   _delay_ms(2000);
	   
	   
	   Robot_Left();//360
 19e:	0e 94 55 00 	call	0xaa	; 0xaa <Robot_Left>
 1a2:	9f ed       	ldi	r25, 0xDF	; 223
 1a4:	23 e0       	ldi	r18, 0x03	; 3
 1a6:	83 e0       	ldi	r24, 0x03	; 3
 1a8:	91 50       	subi	r25, 0x01	; 1
 1aa:	20 40       	sbci	r18, 0x00	; 0
 1ac:	80 40       	sbci	r24, 0x00	; 0
 1ae:	e1 f7       	brne	.-8      	; 0x1a8 <main+0xe0>
 1b0:	00 c0       	rjmp	.+0      	; 0x1b2 <main+0xea>
 1b2:	00 00       	nop
	   _delay_ms(190 * 5.2);
	   Robot_Stop();
 1b4:	0e 94 5f 00 	call	0xbe	; 0xbe <Robot_Stop>
 1b8:	9f e7       	ldi	r25, 0x7F	; 127
 1ba:	2a e1       	ldi	r18, 0x1A	; 26
 1bc:	86 e0       	ldi	r24, 0x06	; 6
 1be:	91 50       	subi	r25, 0x01	; 1
 1c0:	20 40       	sbci	r18, 0x00	; 0
 1c2:	80 40       	sbci	r24, 0x00	; 0
 1c4:	e1 f7       	brne	.-8      	; 0x1be <main+0xf6>
 1c6:	00 c0       	rjmp	.+0      	; 0x1c8 <main+0x100>
 1c8:	00 00       	nop
 1ca:	83 cf       	rjmp	.-250    	; 0xd2 <main+0xa>

000001cc <_exit>:
 1cc:	f8 94       	cli

000001ce <__stop_program>:
 1ce:	ff cf       	rjmp	.-2      	; 0x1ce <__stop_program>
